<%- include('../partials/user/header') %>
<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  }

  body {
    background-color: #f8f8f8;
    color: #333;
  }

  .back-link {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    margin-top: 20px;
    text-decoration: none;
    color: #1d2951;
    font-size: 14px;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .checkout-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }

  .order-title {
    font-weight: 500;
    color: #333;
    font-size: 18px;
  }

  .amount-display {
    text-align: right;
  }

  .amount-label {
    font-size: 12px;
    color: #777;
  }

  .amount-value {
    font-weight: 600;
    font-size: 18px;
  }

  .checkout-container {
    display: flex;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    background-color: #fff;
    overflow: hidden;
  }

  .payment-methods {
    width: 30%;
    background-color: #f9f9f9;
    border-right: 1px solid #e0e0e0;
    padding: 20px 0;
  }

  .payment-option {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .payment-option:hover {
    background-color: #f0f0f0;
  }

  .payment-option.active {
    border-left: 3px solid #1d2951;
    background-color: #fff;
  }

  .payment-option.disabled {
    opacity: 0.5;
    pointer-events: none;
    cursor: not-allowed;
  }

  .payment-icon {
    margin-right: 15px;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .payment-name {
    font-size: 14px;
  }

  .payment-details {
    width: 70%;
    padding: 30px;
    display: flex;
    flex-direction: column;
  }

  .payment-method-title {
    display: flex;
    align-items: center;
    margin-bottom: 30px;
    font-size: 16px;
    font-weight: 500;
  }

  .method-icon {
    margin-right: 10px;
  }

  .selected-indicator {
    margin-left: auto;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 2px solid #1d2951;
    background-color: #1d2951;
  }

  .place-order-btn {
    margin-top: auto;
    background-color: #1d2951;
    color: white;
    padding: 12px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .place-order-btn:hover {
    background-color: #1d2951;
  }

  .secure-delivery {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 20px;
    padding: 10px;
    border: 1px dashed #1d2951;
    border-radius: 4px;
    color: #1d2951;
  }

  .secure-icon {
    margin-right: 10px;
  }

  .help-chat {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: flex;
    align-items: center;
    background-color: white;
    padding: 10px 15px;
    border-radius: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .help-text {
    margin-right: 10px;
    font-size: 14px;
  }

  .close-btn {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: #f0f0f0;
    cursor: pointer;
  }

  .chat-avatar {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #f0f0f0;
    display: none;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
  }

  @media (max-width: 768px) {
    .checkout-container {
      flex-direction: column;
    }

    .payment-methods,
    .payment-details {
      width: 100%;
    }

    .payment-methods {
      border-right: none;
      border-bottom: 1px solid #e0e0e0;
    }
  }
</style>

<div class="container">
  <a href="/checkout" class="back-link">Checkout Page</a>

  <div class="checkout-header">
    <div class="order-title">Order Amount</div>
    <div class="amount-display">
      <div class="amount-label">Amount</div>
      <div class="amount-value">₹<%= finalPrice.toFixed(2) %></div>
    </div>
  </div>

  <input type="hidden" id="selectedPaymentMethod" value="Cash on Delivery" />

  <div class="checkout-container">
    <div class="payment-methods">
      <div class="payment-option active" data-method="Cash on Delivery">
        <div class="payment-icon">
          <svg><!-- Cash on Delivery Icon (Placeholder) --></svg>
        </div>
        <div class="payment-name">Cash on Delivery</div>
      </div>
      <div class="payment-option" data-method="Online Payment">
        <div class="payment-icon">
          <svg><!-- Online Payment Icon (Placeholder) --></svg>
        </div>
        <div class="payment-name">Online Payment</div>
      </div>
      <div class="payment-option" data-method="Wallet">
        <div class="payment-icon">
          <svg><!-- Wallet Icon (Placeholder) --></svg>
        </div>
        <div class="payment-name">Wallet</div>
      </div>
    </div>

    <div class="payment-details">
      <div class="payment-method-title">
        <div class="method-icon">
          <svg><!-- Default Icon (Placeholder) --></svg>
        </div>
        <div>Cash on Delivery</div>
        <div class="selected-indicator"></div>
      </div>

      <button id="placeOrderBtn" class="place-order-btn">Place Order</button>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const paymentOptions = document.querySelectorAll(".payment-option");
    const paymentTitle = document.querySelector(".payment-method-title div:nth-child(2)");
    const methodIcon = document.querySelector(".method-icon svg");
    const placeOrderBtn = document.getElementById("placeOrderBtn");
    const selectedPaymentMethod = document.getElementById("selectedPaymentMethod");

    const finalPrice = parseFloat("<%= finalPrice %>");
    const codOption = document.querySelector('.payment-option[data-method="Cash on Delivery"]');

    if (finalPrice > 1000) {
      codOption.classList.remove("active");
      codOption.classList.add("disabled");
      codOption.title = "Cash on Delivery is not available for orders above ₹1000";
      if (selectedPaymentMethod.value === "Cash on Delivery") {
        const onlinePaymentOption = document.querySelector('.payment-option[data-method="Online Payment"]');
        onlinePaymentOption.classList.add("active");
        selectedPaymentMethod.value = "Online Payment";
        paymentTitle.textContent = "Online Payment";
        const optionIcon = onlinePaymentOption.querySelector(".payment-icon svg").cloneNode(true);
        methodIcon.replaceWith(optionIcon);
      }
    }

    paymentOptions.forEach((option) => {
      option.addEventListener("click", function () {
        if (!this.classList.contains("disabled")) {
          paymentOptions.forEach((opt) => opt.classList.remove("active"));
          this.classList.add("active");
          const paymentName = this.querySelector(".payment-name").textContent;
          paymentTitle.textContent = paymentName;
          selectedPaymentMethod.value = this.dataset.method;
          const optionIcon = this.querySelector(".payment-icon svg").cloneNode(true);
          methodIcon.replaceWith(optionIcon);
        }
      });
    });

    placeOrderBtn.addEventListener("click", function () {
      const paymentMethod = selectedPaymentMethod.value;
      if (paymentMethod === "Cash on Delivery" && finalPrice > 1000) {
        alert("Cash on Delivery is not available for orders above ₹1000.");
        return;
      }
      if (paymentMethod === "Online Payment") {
        payNow();
      } else if (paymentMethod === "Cash on Delivery") {
        window.location.href = "/place-order";
      } else if (paymentMethod === "Wallet") {
        payWithWallet();
      } else {
        alert("Selected payment method is not yet implemented.");
      }
    });

    function payNow() {
      Swal.fire({
        title: "Processing",
        text: "Preparing your payment...",
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        },
      });

      if (isNaN(finalPrice)) {
        Swal.fire({
          title: "Error",
          text: "Invalid amount. Please try again.",
          icon: "error",
          confirmButtonColor: "#1d2951",
        });
        return;
      }

      fetch("/create-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount: finalPrice }),
      })
        .then((response) => response.json())
        .then((order) => {
          Swal.close();
          const options = {
            key: order.key_id,
            amount: order.amount,
            currency: order.currency,
            name: "Raabta Collections",
            description: "Jewellery Purchase",
            order_id: order.id,
            handler: function (response) {
              verifyPayment(response, order);
            },
            prefill: {
              name: "<%= user.name %>",
              email: "<%= user.email %>",
              contact: "<%= user.phone %>",
            },
            theme: { color: "#1d2951" },
            modal: {
              ondismiss: function () {
                window.location.href = "/orders";
              },
            },
          };

          const rzp = new Razorpay(options);
          rzp.open();

          rzp.on("payment.failed", function (response) {
            fetch("/save-failed-payment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                orderId: order.id,
                error: response.error,
              }),
            }).then(() => {
              Swal.fire({
                title: "Payment Failed",
                text: response.error.description,
                icon: "error",
                confirmButtonColor: "#1d2951",
              });
            });
          });
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "There was a problem preparing your payment.",
            icon: "error",
            confirmButtonColor: "#1d2951",
          });
        });
    }

    function verifyPayment(payment, order) {
      fetch("/verify-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ payment, order }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            window.location.href = "/orderconfirmation/" + data.orderId;
          } else {
            Swal.fire({
              title: "Payment Failed",
              text: data.message,
              icon: "error",
              confirmButtonColor: "#1d2951",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "There was a problem verifying your payment.",
            icon: "error",
            confirmButtonColor: "#1d2951",
          });
        });
    }

    function payWithWallet() {
      Swal.fire({
        title: "Processing",
        text: "Processing your payment via wallet...",
        allowOutsideClick: false,
        didOpen: () => {
          Swal.showLoading();
        },
      });

      fetch("/place-order-wallet", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      })
        .then((response) => response.json())
        .then((data) => {
          Swal.close();
          if (data.success) {
            window.location.href = "/orderconfirmation/" + data.orderId;
          } else {
            Swal.fire({
              title: "Payment Failed",
              text: data.message || "Insufficient balance in wallet",
              icon: "error",
              confirmButtonColor: "#1d2951",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "There was a problem processing your wallet payment.",
            icon: "error",
            confirmButtonColor: "#1d2951",
          });
        });
    }

    fetch("/get-wallet-balance")
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          const walletOption = document.querySelector('.payment-option[data-method="Wallet"]');
          if (walletOption) {
            const paymentName = walletOption.querySelector(".payment-name");
            paymentName.textContent = `Wallet (₹${data.balance.toFixed(2)})`;
          }
        }
      })
      .catch((error) => console.error("Error fetching wallet balance:", error));
  });

  function retryPayment(orderId) {
    fetch("/retry-payment", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ orderId }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          const options = {
            key: data.key_id,
            amount: data.amount,
            currency: data.currency,
            name: "Raabta Collections",
            description: "Jewellery Purchase Retry",
            order_id: data.orderId,
            handler: function (response) {
              verifyPayment(response, data);
            },
            theme: { color: "#1d2951" },
            modal: {
              ondismiss: function () {
                window.location.href = "/orders";
              },
            },
          };
          const rzp = new Razorpay(options);
          rzp.open();
        }
      })
      .catch((error) => {
        console.error("Retry payment error:", error);
        Swal.fire({
          title: "Error",
          text: "Failed to initiate payment retry",
          icon: "error",
          confirmButtonColor: "#1d2951",
        });
      });
  }

  window.retryPayment = retryPayment;
</script>

<%- include('../partials/user/footer') %>