<%- include('../partials/admin/header') %>

<style>
  .form-control, select[multiple] {
    background-color: #ffffff;
    border: 1px solid #000000;
    color: #000000;
    font-family: 'Montserrat', sans-serif;
    border-radius: 4px;
    padding: 10px;
    font-size: 14px;
  }
  .form-control:focus, select[multiple]:focus {
    border-color: #FFD700;
    box-shadow: 0 0 5px rgba(255, 215, 0, 0.5);
  }
  .form-control.error, select[multiple].error {
    border-color: #FFD700;
  }
  .text-danger {
    font-size: 0.875em;
    margin-top: 5px;
    color: #000000;
    font-family: 'Montserrat', sans-serif;
  }
  .form-text {
    font-size: 12px;
    color: #000000;
    font-family: 'Montserrat', sans-serif;
    margin-top: 5px;
  }
  .radio-input {
    margin-right: 8px;
  }
  .radio-label {
    color: #000000;
    font-family: 'Montserrat', sans-serif;
    font-weight: 500;
  }
  select[multiple] option:checked {
    background-color: #FFD700;
    color: #000000;
  }
  .error-message {
    color: #000000;
    font-family: 'Montserrat', sans-serif;
    font-size: 0.875em;
    margin-top: 10px;
    text-align: center;
  }
</style>

<section class="content-main" style="background: #ffffff; padding: 60px; min-height: 90vh; max-width: 2000px; margin: 0 auto;">
  <div class="content-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <div>
      <h2 class="content-title" style="font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Edit Offer</h2>
      <p style="font-family: 'Montserrat', sans-serif; color: #000000;">Update existing offer details</p>
    </div>
    <button class="back-btn" 
            onclick="window.location.href='/admin/offer'"
            style="background-color: #000000; color: #FFD700; padding: 8px 15px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; cursor: pointer; transition: all 0.3s;"
            onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
            onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
      Back to Offers
    </button>
  </div>

  <div class="form-container" style="background-color: #ffffff; padding: 20px; border: 1px solid #000000; border-radius: 4px;">
    <form action="/admin/editoffer/<%= offer._id %>" method="POST" id="offerForm">
      <div id="formError" class="error-message"></div>
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="offerName" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Offer Name</label>
        <input type="text" class="form-control" id="offerName" name="offerName" value="<%= offer.offerName %>" required>
        <div id="offerNameError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="discount" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Discount Percentage (%)</label>
        <input type="number" class="form-control" id="discount" name="discount" min="1" max="100" value="<%= offer.discount %>" required>
        <div id="discountError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="startDate" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Start Date</label>
        <input type="datetime-local" class="form-control" id="startDate" name="startDate" value="<%= new Date(offer.startDate).toISOString().slice(0, 16) %>" required>
        <div id="startDateError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="endDate" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">End Date</label>
        <input type="datetime-local" class="form-control" id="endDate" name="endDate" value="<%= new Date(offer.endDate).toISOString().slice(0, 16) %>" required>
        <div id="endDateError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Offer Type</label>
        <div class="radio-group" style="display: flex; gap: 20px; margin-bottom: 15px;">
          <label class="radio-label">
            <input type="radio" name="offerType" value="product" class="radio-input" <%= offer.offerType === 'product' ? 'checked' : '' %>> Product Offer
          </label>
          <label class="radio-label">
            <input type="radio" name="offerType" value="category" class="radio-input" <%= offer.offerType === 'category' ? 'checked' : '' %>> Category Offer
          </label>
        </div>
        <div id="offerTypeError" class="text-danger"></div>
      </div>
      
      <div id="productSection" class="form-section <%= offer.offerType !== 'product' ? 'hidden' : '' %>" style="padding: 15px; margin: 15px 0; border: 1px solid #000000; border-radius: 4px; background-color: #ffffff;">
        <h4 class="form-section-title" style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #000000; font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Select Products</h4>
        <div class="form-group">
          <label for="productId" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Products</label>
          <select multiple class="form-control" id="productId" name="productId">
            <% products.forEach(product => { %>
              <option value="<%= product._id.toString() %>"
                      <%= (offer.productId || []).some(p => (p._id || p).toString() === product._id.toString()) ? 'selected' : '' %>>
                <%= product.productName %>
              </option>
            <% }) %>
          </select>
          <small class="form-text">Hold Ctrl (or Cmd on Mac) to select multiple products</small>
          <div id="productIdError" class="text-danger"></div>
        </div>
      </div>
      
      <div id="categorySection" class="form-section <%= offer.offerType !== 'category' ? 'hidden' : '' %>" style="padding: 15px; margin: 15px 0; border: 1px solid #000000; border-radius: 4px; background-color: #ffffff;">
        <h4 class="form-section-title" style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #000000; font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Select Categories</h4>
        <div class="form-group">
          <label for="categoryId" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Categories</label>
          <select multiple class="form-control" id="categoryId" name="categoryId">

            <% categories.forEach(category => { %>
              <option value="<%= category._id.toString() %>"
                      <%= (offer.categoryId || []).some(c => (c._id || c).toString() === category._id.toString()) ? 'selected' : '' %>>
                <%= category.name %>
              </option>
            <% }) %>
          </select>
          <small class="form-text">Hold Ctrl (or Cmd on Mac) to select multiple categories</small>
          <div id="categoryIdError" class="text-danger"></div>
        </div>
      </div>
      
      <div class="form-group" style="text-align: center; margin-top: 30px;">
        <button type="submit" 
                class="submit-btn"
                style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; cursor: pointer; transition: all 0.3s;"
                onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
          Update Offer
        </button>
      </div>
    </form>
  </div>
</section>

<%- include('../partials/admin/footer') %>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('offerForm');
  const today = new Date();
  const todayISO = new Date(today.getTime() - today.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
  const startDateInput = document.getElementById('startDate');
  const endDateInput = document.getElementById('endDate');
  const offerTypeRadios = document.querySelectorAll('input[name="offerType"]');
  const productSection = document.getElementById('productSection');
  const categorySection = document.getElementById('categorySection');
  const productSelect = document.getElementById('productId');
  const categorySelect = document.getElementById('categoryId');

  // Set minimum start and end dates
  startDateInput.min = todayISO;
  endDateInput.min = todayISO;

  // Toggle visibility of sections on page load
  function initializeSections() {
    const offerType = document.querySelector('input[name="offerType"]:checked')?.value;
    if (offerType === 'product') {
      productSection.classList.remove('hidden');
      categorySection.classList.add('hidden');
    } else if (offerType === 'category') {
      categorySection.classList.remove('hidden');
      productSection.classList.add('hidden');
    }
  }

  // Style selected options
  function updateSelectedStyles(selectElement) {
    selectElement.querySelectorAll('option').forEach(option => {
      if (option.selected) {
        option.style.backgroundColor = '#FFD700';
        option.style.color = '#000000';
      } else {
        option.style.backgroundColor = '';
        option.style.color = '';
      }
    });
  }

  // Show error
  function showError(field, errorElement, message) {
    errorElement.innerHTML = message;
    field.classList.add('error');
  }

  // Validate field
  function validateField(field) {
    const errorElement = document.getElementById(field.id + 'Error');
    errorElement.innerHTML = '';
    field.classList.remove('error');

    switch (field.id) {
      case 'offerName':
        const offerName = field.value.trim();
        if (!offerName) {
          showError(field, errorElement, 'Offer name is required');
        } else if (offerName.length < 3 || offerName.length > 50) {
          showError(field, errorElement, 'Name must be 3-50 characters long');
        }
        break;

      case 'discount':
        const discount = parseFloat(field.value);
        if (!field.value || isNaN(discount)) {
          showError(field, errorElement, 'Discount percentage is required');
        } else if (discount < 1 || discount > 100) {
          showError(field, errorElement, 'Discount must be between 1-100%');
        }
        break;

      case 'startDate':
        const start = new Date(field.value);
        const todayDate = new Date(todayISO);
        if (!field.value) {
          showError(field, errorElement, 'Start date is required');
        } else if (isNaN(start) || start < todayDate) {
          showError(field, errorElement, 'Start date cannot be in the past');
        }
        break;

      case 'endDate':
        const end = new Date(field.value);
        const startVal = new Date(document.getElementById('startDate').value);
        if (!field.value) {
          showError(field, errorElement, 'End date is required');
        } else if (isNaN(end)) {
          showError(field, errorElement, 'Invalid end date');
        } else if (end < new Date(todayISO)) {
          showError(field, errorElement, 'End date cannot be in the past');
        } else if (!isNaN(startVal) && end <= startVal) {
          showError(field, errorElement, 'End date must be after start date');
        } else if (!isNaN(startVal) && (end - startVal) < 3600000) {
          showError(field, errorElement, 'Offer must be active for at least 1 hour');
        }
        break;

      case 'productId':
        if (document.querySelector('input[name="offerType"]:checked')?.value === 'product' && field.selectedOptions.length === 0) {
          showError(field, errorElement, 'At least one product must be selected');
        }
        break;

      case 'categoryId':
        if (document.querySelector('input[name="offerType"]:checked')?.value === 'category' && field.selectedOptions.length === 0) {
          showError(field, errorElement, 'At least one category must be selected');
        }
        break;
    }
  }

  // Validate entire form
  function validateForm() {
    let isValid = true;
    const fields = ['offerName', 'discount', 'startDate', 'endDate', 'productId', 'categoryId'];
    fields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      validateField(field);
      if (field.classList.contains('error')) isValid = false;
    });

    const offerType = document.querySelector('input[name="offerType"]:checked');
    const offerTypeError = document.getElementById('offerTypeError');
    if (!offerType) {
      offerTypeError.innerHTML = 'Please select a valid offer type';
      isValid = false;
    } else {
      offerTypeError.innerHTML = '';
    }

    return isValid;
  }

  // Handle form submission
  form.addEventListener('submit', function (event) {
    console.log("event:",event)
    event.preventDefault();
    if (validateForm()) {
      const formData = new FormData(this);
      const jsonData = {};

      formData.forEach((value, key) => {
        if (jsonData[key]) {
          if (Array.isArray(jsonData[key])) {
            jsonData[key].push(value);
          } else {
            jsonData[key] = [jsonData[key], value];
          }
        } else {
          jsonData[key] = value;
        }
      });

      // Ensure arrays for multi-select
      if (typeof jsonData.productId === 'string') jsonData.productId = [jsonData.productId];
      if (typeof jsonData.categoryId === 'string') jsonData.categoryId = [jsonData.categoryId];
      console.log("jsonData:",jsonData)
      console.log("this.action:",this.action)
      fetch(this.action, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = '/admin/offer';
        } else {
          Object.keys(data.errors || {}).forEach(key => {
            const errorElement = document.getElementById(key + 'Error');
            const field = document.getElementById(key);
            if (errorElement && field) {
              errorElement.innerHTML = data.errors[key];
              field.classList.add('error');
            }
          });
        }
      })
      .catch(err => {
        console.error('Form submission error:', err);
        alert('An error occurred while submitting the form.');
      });
    }
  });

  // Live validation
  const inputs = document.querySelectorAll('.form-control');
  inputs.forEach(input => {
    input.addEventListener('input', () => validateField(input));
    input.addEventListener('change', () => validateField(input));
  });

  // Offer type toggle
  offerTypeRadios.forEach(radio => {
    radio.addEventListener('change', function () {
      initializeSections();
      if (this.value === 'product') {
        validateField(productSelect);
        categorySelect.classList.remove('error');
        document.getElementById('categoryIdError').innerHTML = '';
      } else if (this.value === 'category') {
        validateField(categorySelect);
        productSelect.classList.remove('error');
        document.getElementById('productIdError').innerHTML = '';
      }
    });
  });

  productSelect.addEventListener('change', () => {
    updateSelectedStyles(productSelect);
    validateField(productSelect);
  });

  categorySelect.addEventListener('change', () => {
    updateSelectedStyles(categorySelect);
    validateField(categorySelect);
  });

  initializeSections(); // show relevant fields
});
</script>

