<%- include('../partials/admin/header') %>

<style>
  .form-control, select[multiple] {
    background-color: #ffffff; /* White background */
    border: 1px solid #000000; /* Black border */
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
    border-radius: 4px;
    padding: 10px;
    font-size: 14px;
  }
  .form-control:focus, select[multiple]:focus {
    border-color: #FFD700; /* Gold border on focus */
    box-shadow: none;
  }
  .form-control.error, select[multiple].error {
    border-color: #FFD700; /* Gold border for errors */
  }
  .text-danger {
    font-size: 0.875em;
    margin-top: 5px;
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
  }
  .form-text {
    font-size: 12px;
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
    margin-top: 5px;
  }
  .radio-input {
    margin-right: 8px;
  }
  .radio-label {
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
    font-weight: 500;
  }
  .selected-items {
    margin-top: 10px;
    padding: 10px;
    background-color: #ffffff; /* White background */
    border: 1px solid #000000; /* Black border */
    border-radius: 4px;
    min-height: 40px;
  }
  .selected-items p {
    margin: 0;
    font-size: 14px;
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
  }
  .selected-items ul {
    list-style: none;
    padding: 0;
    margin: 5px 0 0 0;
  }
  .selected-items li {
    display: inline-block;
    background-color: #ffffff; /* White background */
    border: 1px solid #000000; /* Black border */
    padding: 5px 10px;
    margin: 3px;
    border-radius: 3px;
    font-size: 13px;
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
  }
  .select2-container--default .select2-selection--multiple {
    background-color: #ffffff; /* White background */
    border: 1px solid #000000; /* Black border */
    border-radius: 4px;
    font-family: 'Montserrat', sans-serif;
  }
  .select2-container--default .select2-selection--multiple .select2-selection__choice {
    background-color: #ffffff; /* White background */
    border: 1px solid #000000; /* Black border */
    color: #000000; /* Black text */
    font-family: 'Montserrat', sans-serif;
  }
  .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
    color: #FFD700; /* Gold text */
  }
  .select2-container--default .select2-search--inline .select2-search__field {
    font-family: 'Montserrat', sans-serif;
    color: #000000; /* Black text */
  }
  .select2-container--default .select2-results__option {
    font-family: 'Montserrat', sans-serif;
    color: #000000; /* Black text */
  }
  .select2-container--default .select2-results__option--highlighted[aria-selected] {
    background-color: #FFD700; /* Gold background */
    color: #000000; /* Black text */
  }
</style>

<section class="content-main" style="background: #ffffff; padding: 60px; min-height: 90vh; max-width: 2000px; margin: 0 auto;">
  <div class="content-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
    <div>
      <h2 class="content-title" style="font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Add New Offer</h2>
      <p style="font-family: 'Montserrat', sans-serif; color: #000000;">Create a new discount offer</p>
    </div>
    <button class="back-btn" 
            onclick="window.location.href='/admin/offer'"
            style="background-color: #000000; color: #FFD700; padding: 8px 15px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; cursor: pointer; transition: all 0.3s;"
            onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
            onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
      Back to Offers
    </button>
  </div>

  <div class="form-container" style="background-color: #ffffff; padding: 20px; border: 1px solid #000000; border-radius: 4px;">
    <form action="/admin/addoffer" method="POST" id="offerForm">
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="offerName" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Offer Name</label>
        <input type="text" class="form-control" id="offerName" name="offerName" required>
        <div id="offerNameError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="discount" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Discount Percentage (%)</label>
        <input type="number" class="form-control" id="discount" name="discount" min="1" max="100" required>
        <div id="discountError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="startDate" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Start Date</label>
        <input type="datetime-local" class="form-control" id="startDate" name="startDate" required>
        <div id="startDateError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label for="endDate" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">End Date</label>
        <input type="datetime-local" class="form-control" id="endDate" name="endDate" required>
        <div id="endDateError" class="text-danger"></div>
      </div>
      
      <div class="form-group" style="margin-bottom: 20px;">
        <label style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Offer Type</label>
        <div class="radio-group" style="display: flex; gap: 20px; margin-bottom: 15px;">
          <label class="radio-label">
            <input type="radio" name="offerType" value="product" class="radio-input" checked> Product Offer
          </label>
          <label class="radio-label">
            <input type="radio" name="offerType" value="category" class="radio-input"> Category Offer
          </label>
        </div>
        <div id="offerTypeError" class="text-danger"></div>
      </div>
      
      <div id="productSection" class="form-section" style="padding: 15px; margin: 15px 0; border: 1px solid #000000; border-radius: 4px; background-color: #ffffff;">
        <h4 class="form-section-title" style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #000000; font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Select Products</h4>
        <div class="form-group">
          <label for="productId" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Products</label>
          <select multiple class="form-control" id="productId" name="productId" aria-describedby="productIdHelp">
            <% products.forEach(product => { %>
              <option value="<%= product._id %>"><%= product.productName %></option>
            <% }) %>
          </select>
          <small id="productIdHelp" class="form-text">
            Type to search or select multiple products.
          </small>
          <div id="productIdError" class="text-danger"></div>
          <div class="selected-items" id="selectedProducts">
            <p>Selected Products:</p>
            <ul></ul>
          </div>
        </div>
      </div>
      
      <div id="categorySection" class="form-section hidden" style="padding: 15px; margin: 15px 0; border: 1px solid #000000; border-radius: 4px; background-color: #ffffff;">
        <h4 class="form-section-title" style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #000000; font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Select Categories</h4>
        <div class="form-group">
          <label for="categoryId" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Categories</label>
          <select multiple class="form-control" id="categoryId" name="categoryId" aria-describedby="categoryIdHelp">
            <% categories.forEach(category => { %>
              <option value="<%= category._id %>"><%= category.name %></option>
            <% }) %>
          </select>
          <small id="categoryIdHelp" class="form-text">
            Type to search or select multiple categories.
          </small>
          <div id="categoryIdError" class="text-danger"></div>
          <div class="selected-items" id="selectedCategories">
            <p>Selected Categories:</p>
            <ul></ul>
          </div>
        </div>
      </div>
      
      <div class="form-group" style="text-align: center; margin-top: 30px;">
        <button type="submit" 
                class="submit-btn"
                style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; cursor: pointer; transition: all 0.3s;"
                onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
          Create Offer
        </button>
      </div>
    </form>
  </div>
</section>

<%- include('../partials/admin/footer') %>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Select2 JS -->
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<!-- Select2 CSS -->
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet">

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('offerForm');
  const today = new Date();
  const todayISO = new Date(today.getTime() - today.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
  const startDateInput = document.getElementById('startDate');
  const endDateInput = document.getElementById('endDate');
  const offerTypeRadios = document.querySelectorAll('input[name="offerType"]');
  const productSection = document.getElementById('productSection');
  const categorySection = document.getElementById('categorySection');
  const productSelect = $('#productId');
  const categorySelect = $('#categoryId');
  const selectedProductsList = document.querySelector('#selectedProducts ul');
  const selectedCategoriesList = document.querySelector('#selectedCategories ul');

  // Initialize Select2
  productSelect.select2({
    placeholder: 'Search or select products',
    allowClear: true,
    closeOnSelect: false
  });

  categorySelect.select2({
    placeholder: 'Search or select categories',
    allowClear: true,
    closeOnSelect: false
  });

  // Set default dates
  startDateInput.min = todayISO;
  endDateInput.min = todayISO;
  startDateInput.value = todayISO;
  const thirtyDaysLater = new Date(today);
  thirtyDaysLater.setDate(today.getDate() + 30);
  const thirtyDaysLaterISO = new Date(thirtyDaysLater.getTime() - thirtyDaysLater.getTimezoneOffset() * 60000).toISOString().slice(0, 16);
  endDateInput.value = thirtyDaysLaterISO;

  // Toggle offer type sections
  offerTypeRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      if (this.value === 'product') {
        productSection.classList.remove('hidden');
        categorySection.classList.add('hidden');
        validateField(document.getElementById('productId'));
        validateField(document.getElementById('categoryId'));
      } else if (this.value === 'category') {
        productSection.classList.add('hidden');
        categorySection.classList.remove('hidden');
        validateField(document.getElementById('productId'));
        validateField(document.getElementById('categoryId'));
      }
    });
  });

  // Display selected products
  productSelect.on('change', function() {
    const selectedOptions = productSelect.find(':selected');
    selectedProductsList.innerHTML = '';
    if (selectedOptions.length === 0) {
      selectedProductsList.innerHTML = '<li>No products selected</li>';
    } else {
      selectedOptions.each(function() {
        const li = document.createElement('li');
        li.textContent = $(this).text();
        selectedProductsList.appendChild(li);
      });
    }
    validateField(document.getElementById('productId'));
  });

  // Display selected categories
  categorySelect.on('change', function() {
    const selectedOptions = categorySelect.find(':selected');
    selectedCategoriesList.innerHTML = '';
    if (selectedOptions.length === 0) {
      selectedCategoriesList.innerHTML = '<li>No categories selected</li>';
    } else {
      selectedOptions.each(function() {
        const li = document.createElement('li');
        li.textContent = $(this).text();
        selectedCategoriesList.appendChild(li);
      });
    }
    validateField(document.getElementById('categoryId'));
  });

  // Trigger initial display
  productSelect.trigger('change');
  categorySelect.trigger('change');

  // Form submission handler
  form.addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateForm()) {
      // Log form data for debugging
      const formData = new FormData(form);
      const data = {};
      for (let [key, value] of formData.entries()) {
        if (data[key]) {
          if (!Array.isArray(data[key])) {
            data[key] = [data[key]];
          }
          data[key].push(value);
        } else {
          data[key] = value;
        }
      }
      console.log('Form Data:', data);
      this.submit();
    }
  });

  // Real-time validation
  const inputs = document.querySelectorAll('.form-control');
  inputs.forEach(input => {
    input.addEventListener('input', function() {
      validateField(this);
    });
  });

  function validateField(field) {
    const errorElement = document.getElementById(field.id + 'Error');
    errorElement.innerHTML = '';
    field.classList.remove('error');

    switch(field.id) {
      case 'offerName':
        const offerName = field.value.trim();
        if (!offerName) {
          showError(field, errorElement, 'Offer name is required');
        } else if (offerName.length < 3 || offerName.length > 50) {
          showError(field, errorElement, 'Name must be 3-50 characters long');
        }
        break;

      case 'discount':
        const discount = parseFloat(field.value);
        if (!discount || isNaN(discount)) {
          showError(field, errorElement, 'Discount percentage is required');
        } else if (discount < 1 || discount > 100) {
          showError(field, errorElement, 'Discount must be between 1-100%');
        }
        break;

      case 'startDate':
        const startDate = field.value;
        if (!startDate) {
          showError(field, errorElement, 'Start date is required');
        } else {
          const start = new Date(startDate);
          const todayDate = new Date(todayISO);
          if (start < todayDate) {
            showError(field, errorElement, 'Start date cannot be in the past');
          }
        }
        break;

      case 'endDate':
        const endDate = field.value;
        if (!endDate) {
          showError(field, errorElement, 'End date is required');
        } else {
          const end = new Date(endDate);
          const start = new Date(document.getElementById('startDate').value);
          const todayDate = new Date(todayISO);
          if (end < todayDate) {
            showError(field, errorElement, 'End date cannot be in the past');
          } else if (start && end <= start) {
            showError(field, errorElement, 'End date must be after start date');
          }
        }
        break;

      case 'productId':
        const productOfferType = document.querySelector('input[name="offerType"]:checked').value === 'product';
        if (productOfferType && field.selectedOptions.length === 0) {
          showError(field, errorElement, 'At least one product must be selected');
        }
        break;

      case 'categoryId':
        const categoryOfferType = document.querySelector('input[name="offerType"]:checked').value === 'category';
        if (categoryOfferType && field.selectedOptions.length === 0) {
          showError(field, errorElement, 'At least one category must be selected');
        }
        break;
    }
  }

  function validateForm() {
    let isValid = true;
    const fields = ['offerName', 'discount', 'startDate', 'endDate', 'productId', 'categoryId'];
    
    fields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      validateField(field);
      if (field.classList.contains('error')) {
        isValid = false;
      }
    });

    return isValid;
  }

  function showError(field, errorElement, message) {
    errorElement.innerHTML = message;
    field.classList.add('error');
  }
});
</script>