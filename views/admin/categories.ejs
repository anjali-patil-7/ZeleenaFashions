<%- include('../partials/admin/header') %>

<style>
    /* Define global font and color variables for consistency */
    :root {
        --font-heading: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        --font-body: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        --color-primary: #000000; /* Black */
        --color-accent: #FFD700; /* Gold */
        --color-text: #333333; /* Dark gray for body text */
        --color-muted: #666666; /* Muted gray for secondary text */
        --color-success: #28a745;
        --color-danger: #dc3545;
    }

    /* General Typography */
    .content-title {
        font-family: var(--font-heading);
        font-size: 1.5rem; /* 24px */
        font-weight: 700;
        line-height: 1.3;
        color: var(--color-primary);
        margin-bottom: 0.5rem;
    }

    .content-main p,
    .no-data {
        font-family: var(--font-body);
        font-size: 0.875rem; /* 14px */
        font-weight: 400;
        line-height: 1.6;
        color: var(--color-muted);
    }

    /* Content Header */
    .content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.25rem;
    }

    .add-category-btn {
        background-color: var(--color-primary);
        color: var(--color-accent);
        padding: 0.625rem 1.25rem;
        border: none;
        border-radius: 0.25rem;
        text-decoration: none;
        font-family: var(--font-heading);
        font-size: 0.875rem; /* 14px */
        font-weight: 500;
        line-height: 1.4;
        transition: all 0.3s;
    }

    .add-category-btn:hover {
        background-color: var(--color-accent);
        color: var(--color-primary);
    }

    /* Search Container */
    .search-container {
        margin-bottom: 1.875rem;
    }

    .search-container form {
        display: flex;
        max-width: 31.25rem; /* 500px */
    }

    .search-container input {
        flex: 1;
        padding: 0.625rem 0.9375rem;
        border: 1px solid var(--color-primary);
        border-radius: 0.25rem 0 0 0.25rem;
        font-family: var(--font-body);
        font-size: 0.875rem; /* 14px */
        font-weight: 400;
        line-height: 1.5;
        color: var(--color-text);
    }

    .search-container input::placeholder {
        color: var(--color-muted);
    }

    .search-container button {
        background-color: var(--color-primary);
        color: var(--color-accent);
        padding: 0.625rem 1.25rem;
        border: none;
        border-radius: 0 0.25rem 0.25rem 0;
        cursor: pointer;
        font-family: var(--font-heading);
        font-size: 0.875rem; /* 14px */
        font-weight: 500;
        line-height: 1.4;
        transition: all 0.3s;
    }

    .search-container button:hover {
        background-color: var(--color-accent);
        color: var(--color-primary);
    }

    .search-container a {
        background-color: #f8f8f8;
        color: var(--color-primary);
        padding: 0.625rem 0.9375rem;
        border: 1px solid var(--color-primary);
        border-left: none;
        text-decoration: none;
        display: flex;
        align-items: center;
        font-family: var(--font-heading);
        font-size: 0.875rem; /* 14px */
        font-weight: 500;
        line-height: 1.4;
        transition: all 0.3s;
    }

    .search-container a:hover {
        background-color: var(--color-accent);
        color: var(--color-primary);
    }

    /* Categories Table */
    .categories-table {
        width: 100%;
        border-collapse: collapse;
        margin: 1.5rem 0;
        border: 1px solid var(--color-primary);
        font-family: var(--font-body);
        font-size: 0.875rem; /* 14px */
        line-height: 1.5;
    }

    .categories-table th {
        padding: 0.9375rem;
        text-align: center;
        background-color: var(--color-primary);
        color: var(--color-accent);
        font-family: var(--font-heading);
        font-size: 0.875rem; /* 14px */
        font-weight: 600;
        line-height: 1.3;
        letter-spacing: 0.03em;
        text-transform: uppercase;
    }

    .categories-table td {
        padding: 0.75rem;
        text-align: center;
        border: 1px solid #e0e0e0;
        color: var(--color-text);
        font-weight: 400;
    }

    .categories-table tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .categories-table tr:hover {
        background-color: #f0f0f0;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.3125rem;
        justify-content: center;
    }

    .action-btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
        color: var(--color-accent);
        background-color: var(--color-primary);
        text-decoration: none;
        display: inline-block;
        font-family: var(--font-heading);
        font-size: 0.75rem; /* 12px */
        font-weight: 500;
        line-height: 1.3;
        transition: all 0.3s;
    }

    .action-btn:hover {
        background-color: var(--color-accent);
        color: var(--color-primary);
    }

    /* Pagination */
    .pagination {
        margin-top: 1.875rem;
        display: flex;
        gap: 0.5rem;
        justify-content: center;
        align-items: center;
    }

    .page-link {
        padding: 0.5rem 0.875rem;
        border: 1px solid var(--color-primary);
        text-decoration: none;
        color: var(--color-primary);
        font-family: var(--font-heading);
        font-size: 0.875rem; /* 14px */
        font-weight: 500;
        line-height: 1.4;
        border-radius: 0.25rem;
        transition: all 0.3s;
    }

    .page-link:hover {
        background-color: var(--color-primary);
        color: var(--color-accent);
    }

    .page-link.active {
        background-color: var(--color-primary);
        color: var(--color-accent);
        font-weight: 600;
    }

    /* No Data Message */
    .no-data {
        text-align: center;
        font-weight: 500;
        font-size: 1rem; /* 16px */
    }

    /* Spinner */
    .spinner {
        display: inline-block;
        width: 1.125rem;
        height: 1.125rem;
        border: 3px solid rgba(255, 215, 0, 0.3);
        border-radius: 50%;
        border-top-color: var(--color-accent);
        animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Category Image */
    .category-image {
        max-width: 3.75rem; /* 60px */
        max-height: 3.75rem;
        object-fit: cover;
        border-radius: 0.25rem;
    }

    /* Description Cell */
    .description-cell {
        max-width: 18.75rem; /* 300px */
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .description-cell:hover {
        white-space: normal;
        overflow: visible;
        background: #fff;
        z-index: 1;
        position: relative;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 0.5rem;
    }

    /* Status Styles */
    .status-active {
        color: var(--color-success);
        font-weight: 500;
    }

    .status-blocked {
        color: var(--color-danger);
        font-weight: 500;
    }

    /* SweetAlert2 Custom Styles */
    .gold-swal {
        border: 2px solid var(--color-accent) !important;
        font-family: var(--font-body) !important;
        font-size: 0.875rem !important; /* 14px */
    }

    .gold-confirm-btn {
        background-color: var(--color-primary) !important;
        color: var(--color-accent) !important;
        font-family: var(--font-heading) !important;
        font-size: 0.875rem !important; /* 14px */
        font-weight: 500 !important;
    }

    /* Alert Styles */
    .alert {
        padding: 12px 16px;
        margin-bottom: 20px;
        border-radius: 4px;
        font-family: var(--font-heading);
        font-weight: 500;
        border: 1px solid var(--color-accent);
        background-color: #ffffff;
        color: var(--color-primary);
    }
</style>

<section class="content-main" style="background: #ffffff; padding: 1.25rem; min-height: 80vh;">
    <div class="content-header">
        <div>
            <h2 class="content-title">Categories</h2>
            <p>Categories Management</p>
        </div>
        <a href="/admin/addcategory" class="add-category-btn">Add New Category</a>
    </div>

    <!-- Error Message Display -->
    <% if (messages && messages.error) { %>
        <div class="alert">
            <%= messages.error %>
        </div>
    <% } %>

    <!-- Search Container -->
    <div class="search-container">
        <form action="/admin/categories" method="GET">
            <div style="display: flex; max-width: 31.25rem;">
                <input 
                    type="text" 
                    name="query" 
                    id="searchInput"
                    placeholder="Search categories..." 
                    value="<%= searchQuery || '' %>"
                >
                <button type="submit">Search</button>
                <% if (searchQuery) { %>
                    <a href="/admin/categories">Clear</a>
                <% } %>
            </div>
        </form>
    </div>

    <% if (categories.length > 0) { %>
        <div class="table-responsive">
            <table class="categories-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Image</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% categories.forEach(category => { %>
                        <tr id="category-row-<%= category._id %>">
                            <td><%= category.name %></td>
                            <td class="description-cell"><%= category.description %></td>
                            <td>
                                <% if (category.image) { %>
                                    <img src="/uploads/categories/<%= category.image %>" alt="<%= category.name %>" class="category-image">
                                <% } else { %>
                                    <span style="font-family: var(--font-body); font-size: 0.875rem; color: var(--color-muted);">No Image</span>
                                <% } %>
                            </td>
                            <td>
                                <span id="status-<%= category._id %>" class="<%= category.status ? 'status-active' : 'status-blocked' %>">
                                    <%= category.status ? 'Active' : 'Blocked' %>
                                </span>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="/admin/editCategory/<%= category._id %>" class="action-btn">Edit</a>
                                    <button class="action-btn toggle-status" data-id="<%= category._id %>">
                                        <%= category.status ? 'Block' : 'Unblock' %>
                                    </button>
                                    <button class="action-btn delete-category" data-id="<%= category._id %>">Delete</button>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <p class="no-data">No Categories found</p>
    <% } %>

    <% if (categories.length > 0 && totalPages > 1) { %>
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="/admin/categories?page=<%= currentPage - 1 %>&query=<%= encodeURIComponent(searchQuery) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>" class="page-link">←</a>
            <% } %>
            
            <% 
                const maxPagesToShow = 5;
                const halfRange = Math.floor(maxPagesToShow / 2);
                let startPage = Math.max(1, currentPage - halfRange);
                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);
                if (endPage - startPage + 1 < maxPagesToShow) {
                    startPage = Math.max(1, endPage - maxPagesToShow + 1);
                }
            %>
            <% if (startPage > 1) { %>
                <a href="/admin/categories?page=1&query=<%= encodeURIComponent(searchQuery) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>" class="page-link">1</a>
                <% if (startPage > 2) { %>
                    <span class="page-link">...</span>
                <% } %>
            <% } %>

            <% for (let i = startPage; i <= endPage; i++) { %>
                <a href="/admin/categories?page=<%= i %>&query=<%= encodeURIComponent(searchQuery) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>" class="page-link <%= i === currentPage ? 'active' : '' %>">
                    <%= i %>
                </a>
            <% } %>

            <% if (endPage < totalPages) { %>
                <% if (endPage < totalPages - 1) { %>
                    <span class="page-link">...</span>
                <% } %>
                <a href="/admin/categories?page=<%= totalPages %>&query=<%= encodeURIComponent(searchQuery) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>" class="page-link"><%= totalPages %></a>
            <% } %>

            <% if (currentPage < totalPages) { %>
                <a href="/admin/categories?page=<%= currentPage + 1 %>&query=<%= encodeURIComponent(searchQuery) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder %>" class="page-link">→</a>
            <% } %>
        </div>
    <% } %>
</section>

<%- include('../partials/admin/footer') %>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Normalize search input before submission
        const searchForm = document.querySelector('.search-container form');
        const searchInput = document.getElementById('searchInput');
        
        searchForm.addEventListener('submit', function(event) {
            searchInput.value = searchInput.value.trim().toLowerCase();
        });

        document.querySelectorAll('.toggle-status').forEach(button => {
            button.addEventListener('click', function() {
                const categoryId = this.getAttribute('data-id');
                Swal.fire({
                    title: "Are you sure?",
                    text: `Do you want to ${this.textContent.toLowerCase()} this category?`,
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: '#000000',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    customClass: {
                        popup: 'gold-swal',
                        confirmButton: 'gold-confirm-btn'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        const originalText = this.innerHTML;
                        this.innerHTML = '<div class="spinner"></div>';
                        this.disabled = true;
                        
                        fetch(`/admin/toggleCategory/${categoryId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                        .then(response => {
                            if (!response.ok) throw new Error('Network response was not ok');
                            return response.json();
                        })
                        .then(data => {
                            this.innerHTML = data.status ? 'Block' : 'Unblock';
                            this.disabled = false;
                            const statusSpan = document.getElementById(`status-${categoryId}`);
                            statusSpan.textContent = data.status ? 'Active' : 'Blocked';
                            statusSpan.className = data.status ? 'status-active' : 'status-blocked';
                            statusSpan.style.color = data.status ? '#28a745' : '#dc3545';
                            
                            Swal.fire({
                                title: "Success!",
                                text: `Category ${data.status ? 'unblocked' : 'blocked'} successfully`,
                                icon: "success",
                                confirmButtonColor: "#000000",
                                customClass: {
                                    popup: 'gold-swal',
                                    confirmButton: 'gold-confirm-btn'
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            this.innerHTML = originalText;
                            this.disabled = false;
                            Swal.fire({
                                title: "Error!",
                                text: "Something went wrong. Please try again.",
                                icon: "error",
                                confirmButtonColor: "#000000",
                                customClass: {
                                    popup: 'gold-swal',
                                    confirmButton: 'gold-confirm-btn'
                                }
                            });
                        });
                    }
                });
            });
        });

        document.querySelectorAll('.delete-category').forEach(button => {
            button.addEventListener('click', function() {
                const categoryId = this.getAttribute('data-id');
                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to delete this category?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: '#000000',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No',
                    customClass: {
                        popup: 'gold-swal',
                        confirmButton: 'gold-confirm-btn'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/admin/deleteCategory/${categoryId}`, {
                            method: 'DELETE',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.message) {
                                document.getElementById(`category-row-${categoryId}`).remove();
                                Swal.fire({
                                    title: "Success!",
                                    text: data.message,
                                    icon: "success",
                                    confirmButtonColor: "#000000",
                                    customClass: {
                                        popup: 'gold-swal',
                                        confirmButton: 'gold-confirm-btn'
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: "Error!",
                                    text: data.error || 'Failed to delete category',
                                    icon: "error",
                                    confirmButtonColor: "#000000",
                                    customClass: {
                                        popup: 'gold-swal',
                                        confirmButton: 'gold-confirm-btn'
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            Swal.fire({
                                title: "Error!",
                                text: 'An error occurred while deleting category',
                                icon: "error",
                                confirmButtonColor: "#000000",
                                customClass: {
                                    popup: 'gold-swal',
                                    confirmButton: 'gold-confirm-btn'
                                }
                            });
                        });
                    }
                });
            });
        });
    });
</script>