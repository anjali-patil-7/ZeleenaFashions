<%- include('../partials/admin/header') %>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>

<style>
    .alert {
        padding: 12px 16px;
        margin-bottom: 20px;
        border-radius: 4px;
        font-family: 'Montserrat', sans-serif;
        font-weight: 500;
        border: 1px solid #FFD700;
        background-color: #ffffff;
        color: #000000;
    }
    .alert ul {
        margin: 0;
        padding-left: 20px;
    }
    .preview-box {
        margin-bottom: 15px;
    }
    .preview-placeholder {
        border: 2px dashed #000000;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #ffffff;
        color: #666;
        font-family: 'Montserrat', sans-serif;
    }
    .preview-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border: 1px solid #000000;
    }
    .form-control.error, .form-select.error {
        border-color: #FFD700;
    }
    .text-danger {
        font-size: 0.875em;
        margin-top: 5px;
        color: #000000;
        font-family: 'Montserrat', sans-serif;
    }
    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
    }
    .image-preview-item {
        position: relative;
        width: 200px;
        height: 200px;
        border: 1px solid #000000;
        overflow: hidden;
    }
    .image-preview-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .image-actions {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0,0,0,0.7);
        display: flex;
        justify-content: space-around;
        padding: 5px;
    }
    .image-actions button {
        background: none;
        border: none;
        color: #FFD700;
        cursor: pointer;
        font-size: 14px;
        font-family: 'Montserrat', sans-serif;
    }
    .image-actions button:hover {
        color: #ffffff;
    }
    .crop-modal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.7);
    }
    .crop-modal-content {
        position: relative;
        background-color: #ffffff;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #000000;
        width: 80%;
        max-width: 800px;
    }
    .crop-container {
        height: 400px;
        width: 100%;
        background-color: #f0f0f0;
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
    }
    .crop-img {
        display: none;
    }
    .crop-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
    }
    .crop-controls {
        display: flex;
        gap: 10px;
    }
    .crop-buttons {
        display: flex;
        gap: 10px;
    }
    .close-crop-modal {
        position: absolute;
        top: 10px;
        right: 20px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
        color: #000000;
    }
    .crop-info {
        margin-bottom: 15px;
        padding: 10px;
        background-color: #ffffff;
        border: 1px solid #000000;
        border-radius: 4px;
        font-size: 14px;
        color: #000000;
        font-family: 'Montserrat', sans-serif;
    }
    .croppie-container {
        width: 100%;
        height: 100%;
    }
    .croppie-container .cr-viewport {
        border: 2px solid #FFD700;
        box-shadow: 0 0 2000px 2000px rgba(0, 0, 0, 0.5);
    }
    .input-group-text {
        background-color: #f8f9fa;
        color: #000000;
        font-family: 'Montserrat', sans-serif;
    }
</style>

<section class="content-main" style="background: #ffffff; padding: 20px; min-height: 80vh;">
    <div class="content-header">
        <h1 class="content-title" style="font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Edit Product</h1>
        <a href="/admin/product" 
           class="btn" 
           style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; text-decoration: none; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
           onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
           onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
            Back to Products
        </a>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <% if (messages.error && messages.error.length > 0) { %>
                    <div class="alert"><%= messages.error %></div>
                <% } %>
                <% if (messages.success && messages.success.length > 0) { %>
                    <div class="alert"><%= messages.success %></div>
                <% } %>
                <% if (errors && errors.length > 0) { %>
                    <div class="alert">
                        <ul>
                            <% errors.forEach(error => { %>
                                <li><%= error %></li>
                            <% }) %>
                        </ul>
                    </div>
                <% } %>
                <form 
                    id="editProductForm" 
                    method="post" 
                    action="/admin/editproduct/<%= product._id %>" 
                    enctype="multipart/form-data"
                >
                    <input type="hidden" name="id" value="<%= product._id %>">
                    <input type="hidden" id="removedImages" name="removedImages" value="[]">
                    <input type="hidden" id="replacedImages" name="replacedImages" value="[]">

                    <div class="mb-4">
                        <label for="name" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Product Name</label>
                        <input 
                            type="text" 
                            class="form-control" 
                            id="name" 
                            name="name" 
                            value="<%= formData && formData.name ? formData.name : product.productName %>" 
                            required 
                            style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                        />
                        <div id="nameError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="description" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Description</label>
                        <textarea 
                            class="form-control" 
                            id="description" 
                            name="description" 
                            required
                            style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                        ><%= formData && formData.description ? formData.description : product.description %></textarea>
                        <div id="descriptionError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="price" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Price (₹ MRP)</label>
                        <div class="input-group">
                            <span class="input-group-text">₹</span>
                            <input 
                                type="number" 
                                class="form-control" 
                                id="price" 
                                name="price" 
                                required 
                                value="<%= formData && formData.price ? formData.price : product.price %>" 
                                min="1" 
                                max="1000000" 
                                step="0"
                                style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                            />
                            <span class="input-group-text">MRP</span>
                        </div>
                        <small class="form-text text-muted">Enter price as a whole number (e.g., 116860 for ₹1,16,860 MRP).</small>
                        <div id="priceError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="stock" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Stock Quantity</label>
                        <input 
                            type="number" 
                            class="form-control" 
                            id="stock" 
                            name="stock" 
                            required 
                            value="<%= formData && formData.stock ? formData.stock : product.totalStock %>" 
                            min="0" 
                            max="10000" 
                            step="0"
                            style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                        />
                        <div id="stockError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="category" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Category</label>
                        <select 
                            class="form-select" 
                            id="category" 
                            name="category" 
                            required
                            style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                        >
                            <option value="" disabled>Select a category</option>
                            <% categories.forEach(function(category) { %>
                                <option value="<%= category._id %>" <%= (formData && formData.category && formData.category.toString() === category._id.toString()) || (product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>>
                                    <%= category.name %>
                                </option>
                            <% }) %>
                        </select>
                        <div id="categoryError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Current Images</label>
                        <div class="image-preview-container">
                            <% if (product.productImage && product.productImage.length > 0) { %>
                                <% product.productImage.forEach(function(image, index) { %>
                                    <div class="image-preview-item" data-index="<%= index %>">
                                        <img src="<%= image %>" alt="Product Image <%= index + 1 %>">
                                        <div class="image-actions">
                                            <button type="button" class="remove-image" data-index="<%= index %>">Remove</button>
                                            <button type="button" class="replace-image" data-index="<%= index %>">Replace</button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p style="color: #666; font-family: 'Montserrat', sans-serif;">No images available</p>
                            <% } %>
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="imageUpload" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Upload New Images</label>
                        <input type="file" 
                               id="imageUpload" 
                               name="images" 
                               class="form-control" 
                               accept="image/*" 
                               multiple
                               style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"
                        />
                        <div id="newImagesPreview" class="d-flex flex-wrap mt-2 gap-2"></div>
                    </div>

                    <div class="d-flex justify-content-center mt-3">
                        <button type="submit" 
                                class="btn"
                                style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                                onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                                onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                            Update Product
                        </button>
                    </div>  
                </form>
            </div>
        </div>
    </div>
</section>

<div id="cropModal" class="crop-modal">
    <div class="crop-modal-content">
        <span class="close-crop-modal">×</span>
        <h4 style="font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Crop Image (400 x 400)</h4>
        <div class="crop-info">
            All product images will be cropped to a 400x400 pixel square format. Use the controls below to adjust your image.
        </div>
        <div class="crop-container" id="cropContainer">
            <img id="cropImage" class="crop-img" src="">
        </div>
        <div class="crop-actions">
            <div class="crop-controls">
                <button id="zoomIn" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    <i class="fas fa-search-plus"></i> Zoom In
                </button>
                <button id="zoomOut" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    <i class="fas fa-search-minus"></i> Zoom Out
                </button>
                <button id="rotateLeft" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    <i class="fas fa-undo"></i> Rotate Left
                </button>
                <button id="rotateRight" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    <i class="fas fa-redo"></i> Rotate Right
                </button>
                <button id="reset" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    <i class="fas fa-sync"></i> Reset
                </button>
            </div>
            <div class="crop-buttons">
                <button id="cancelCrop" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    Cancel
                </button>
                <button id="confirmCrop" 
                        class="btn"
                        style="background-color: #000000; color: #FFD700; padding: 8px 12px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                        onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                        onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                    Confirm Crop
                </button>
            </div>
        </div>
    </div>
</div>

<input type="file" id="replaceImageInput" style="display: none;" accept="image/*">

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('editProductForm');
      const imageUpload = document.getElementById('imageUpload');
      const newImagesPreview = document.getElementById('newImagesPreview');
      const removedImagesInput = document.getElementById('removedImages');
      const replacedImagesInput = document.getElementById('replacedImages');
      const replaceImageInput = document.getElementById('replaceImageInput');
      const cropModal = document.getElementById('cropModal');
      const cropContainer = document.getElementById('cropContainer');
      const confirmCropBtn = document.getElementById('confirmCrop');
      const cancelCropBtn = document.getElementById('cancelCrop');
      const closeModalBtn = document.querySelector('.close-crop-modal');
  
      const zoomInBtn = document.getElementById('zoomIn');
      const zoomOutBtn = document.getElementById('zoomOut');
      const rotateLeftBtn = document.getElementById('rotateLeft');
      const rotateRightBtn = document.getElementById('rotateRight');
      const resetBtn = document.getElementById('reset');
  
      const CROP_WIDTH = 400;
      const CROP_HEIGHT = 400;
  
      let removedImages = [];
      let replacedImages = {};
      let newImagesData = [];
      let currentCroppie = null;
      let currentReplacementIndex = null;
      let currentFile = null;
      let isNewImage = false;
  
      // Initialize Croppie instance
      function initializeCroppie(imageUrl) {
        if (currentCroppie) {
          currentCroppie.destroy();
        }
        currentCroppie = new Croppie(cropContainer, {
          viewport: { width: CROP_WIDTH, height: CROP_HEIGHT, type: 'square' },
          boundary: { width: 600, height: 400 },
          showZoomer: true,
          enableOrientation: true,
          enableResize: false,
        });
        currentCroppie.bind({
          url: imageUrl,
          zoom: 0,
        });
      }
  
      // Open crop modal
      function openCropModal(imageUrl) {
        cropModal.style.display = 'block';
        initializeCroppie(imageUrl);
      }
  
      // Close crop modal
      function closeCropModal() {
        if (currentCroppie) {
          currentCroppie.destroy();
          currentCroppie = null;
        }
        cropModal.style.display = 'none';
        replaceImageInput.value = '';
        imageUpload.value = '';
        currentFile = null;
        isNewImage = false;
        currentReplacementIndex = null;
      }
  
      // Calculate total images
      function getTotalImages() {
        const remainingImages = <%= product.productImage.length %> - removedImages.length;
        return remainingImages + newImagesData.length + Object.keys(replacedImages).length;
      }
  
      // Update hidden inputs
      function updateHiddenInputs() {
        removedImagesInput.value = JSON.stringify(removedImages);
        replacedImagesInput.value = JSON.stringify(Object.keys(replacedImages).map(Number));
      }
  
      // Handle new image uploads
      imageUpload.addEventListener('change', function (e) {
        const totalImages = getTotalImages();
        const files = Array.from(e.target.files);
        if (totalImages + files.length > 3) {
          alert(`Cannot add ${files.length} more image(s). Exactly 3 images are required. You currently have ${totalImages}.`);
          imageUpload.value = '';
          return;
        }
        files.forEach(file => {
          isNewImage = true;
          currentFile = file;
          const reader = new FileReader();
          reader.onload = function (event) {
            openCropModal(event.target.result);
          };
          reader.readAsDataURL(file);
        });
      });
  
      // Handle image removal
      document.querySelectorAll('.remove-image').forEach(button => {
        button.addEventListener('click', function () {
          const imageIndex = parseInt(this.getAttribute('data-index'));
          if (!removedImages.includes(imageIndex)) {
            removedImages.push(imageIndex);
          }
          if (replacedImages[imageIndex]) {
            delete replacedImages[imageIndex];
          }
          const previewItem = this.closest('.image-preview-item');
          previewItem.remove();
          validateForm();
          updateHiddenInputs();
        });
      });
  
      // Handle image replacement
      document.querySelectorAll('.replace-image').forEach(button => {
        button.addEventListener('click', function () {
          currentReplacementIndex = parseInt(this.getAttribute('data-index'));
          isNewImage = false;
          replaceImageInput.click();
        });
      });
  
      replaceImageInput.addEventListener('change', function (event) {
        if (event.target.files && event.target.files[0]) {
          currentFile = event.target.files[0];
          const reader = new FileReader();
          reader.onload = function (e) {
            openCropModal(e.target.result);
          };
          reader.readAsDataURL(currentFile);
        }
      });
  
      // Crop controls
      zoomInBtn.addEventListener('click', function () {
        if (currentCroppie) {
          currentCroppie.setZoom(currentCroppie.get().zoom + 0.1);
        }
      });
  
      zoomOutBtn.addEventListener('click', function () {
        if (currentCroppie) {
          currentCroppie.setZoom(currentCroppie.get().zoom - 0.1);
        }
      });
  
      rotateLeftBtn.addEventListener('click', function () {
        if (currentCroppie) {
          currentCroppie.rotate(-90);
        }
      });
  
      rotateRightBtn.addEventListener('click', function () {
        if (currentCroppie) {
          currentCroppie.rotate(90);
        }
      });
  
      resetBtn.addEventListener('click', function () {
        if (currentCroppie) {
          currentCroppie.bind({
            url: currentCroppie.get().url,
            zoom: 0,
            orientation: 1,
          });
        }
      });
  
      // Confirm crop
      confirmCropBtn.addEventListener('click', function () {
        if (!currentCroppie) return;
  
        const totalImages = getTotalImages();
        if (isNewImage && totalImages >= 3) {
          alert('Cannot add more images. Exactly 3 images are required.');
          closeCropModal();
          return;
        }
  
        currentCroppie
          .result({
            type: 'blob',
            size: { width: CROP_WIDTH, height: CROP_HEIGHT },
            format: 'jpeg',
            quality: 0.95,
          })
          .then(blob => {
            const fileName = isNewImage
              ? `new_${Date.now()}.jpg`
              : `replaced_${currentReplacementIndex}.jpg`;
            const file = new File([blob], fileName, {
              type: 'image/jpeg',
              lastModified: Date.now(),
            });
  
            if (isNewImage) {
              newImagesData.push(file);
              const previewItem = document.createElement('div');
              previewItem.className = 'image-preview-item';
              previewItem.style.width = '200px';
              previewItem.style.height = '200px';
              previewItem.style.position = 'relative';
  
              const img = document.createElement('img');
              img.src = URL.createObjectURL(blob);
              img.style.width = '100%';
              img.style.height = '100%';
              img.style.objectFit = 'cover';
  
              const actions = document.createElement('div');
              actions.className = 'image-actions';
              actions.innerHTML = `
                <button type="button" class="remove-new-image">Remove</button>
              `;
              previewItem.appendChild(img);
              previewItem.appendChild(actions);
              newImagesPreview.appendChild(previewItem);
  
              previewItem.querySelector('.remove-new-image').addEventListener('click', function () {
                const index = newImagesData.indexOf(file);
                if (index > -1) {
                  newImagesData.splice(index, 1);
                }
                previewItem.remove();
                validateForm();
                updateHiddenInputs();
              });
            } else {
              replacedImages[currentReplacementIndex] = file;
              const imagePreview = document.querySelector(
                `.image-preview-item[data-index="${currentReplacementIndex}"] img`
              );
              if (imagePreview) {
                imagePreview.src = URL.createObjectURL(blob);
              }
              const index = removedImages.indexOf(currentReplacementIndex);
              if (index > -1) {
                removedImages.splice(index, 1);
              }
            }
  
            closeCropModal();
            validateForm();
            updateHiddenInputs();
          })
          .catch(error => {
            console.error('Error generating cropped image:', error);
            alert('Error cropping image. Please try again.');
          });
      });
  
      cancelCropBtn.addEventListener('click', closeCropModal);
      closeModalBtn.addEventListener('click', closeCropModal);
  
      // Form submission
      form.addEventListener('submit', async function (event) {
        event.preventDefault();
        if (!validateForm()) return;
  
        const formData = new FormData(form);
        newImagesData.forEach(file => {
          formData.append('images', file);
        });
        Object.entries(replacedImages).forEach(([index, file]) => {
          formData.append(`replace_${index}`, file);
        });
  
        try {
          const submitBtn = form.querySelector('button[type="submit"]');
          submitBtn.disabled = true;
          submitBtn.innerHTML = 'Updating...';
  
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData,
          });
  
          if (response.ok) {
            if (response.redirected) {
              window.location.href = response.url;
            } else {
              const data = await response.json();
              if (data.success) {
                window.location.href = '/admin/product';
              } else {
                alert(data.message || 'Error updating product');
              }
            }
          } else {
            const text = await response.text();
            console.error('Server response:', text);
            alert('Error updating product. Please try again.');
          }
        } catch (error) {
          console.error('Submission error:', error);
          alert('An error occurred. Please try again.');
        } finally {
          const submitBtn = form.querySelector('button[type="submit"]');
          submitBtn.disabled = false;
          submitBtn.innerHTML = 'Update Product';
        }
      });
  
      // Form validation
      function validateField(field) {
        const errorElement = document.getElementById(field.id + 'Error');
        errorElement.innerHTML = '';
        field.classList.remove('error');
  
        switch (field.id) {
          case 'name':
            const name = field.value.trim();
            if (!name) {
              showError(field, errorElement, 'Product name is required');
            } else if (name.length < 2 || name.length > 100) {
              showError(field, errorElement, 'Name must be 2-100 characters long');
            } else if (!/^[a-zA-Z\s]+$/.test(name)) {
              showError(field, errorElement, 'Name should only contain letters and spaces');
            }
            break;
  
          case 'description':
            const description = field.value.trim();
            if (!description) {
              showError(field, errorElement, 'Description is required');
            } else if (description.length < 10 || description.length > 1000) {
              showError(field, errorElement, 'Description must be 10–1000 characters long');
            } else if (!/^[a-zA-Z0-9\s,.]+$/.test(description)) {
              showError(field, errorElement, 'Description can only contain letters, numbers, spaces, periods, and commas');
            }
            break;
  
          case 'price':
            const price = parseInt(field.value);
            if (!field.value || isNaN(price) || price < 1) {
              showError(field, errorElement, 'Price must be at least 1');
            } else if (price > 1000000) {
              showError(field, errorElement, 'Price cannot exceed 1,000,000');
            }
            break;
  
          case 'stock':
            const stock = parseInt(field.value);
            if (!field.value || isNaN(stock) || stock < 0) {
              showError(field, errorElement, 'Stock must be 0 or greater');
            } else if (stock > 10000) {
              showError(field, errorElement, 'Stock cannot exceed 10,000');
            }
            break;
  
          case 'category':
            if (!field.value) {
              showError(field, errorElement, 'Please select a category');
            }
            break;
        }
      }
  
      function validateForm() {
        let isValid = true;
        const fields = ['name', 'description', 'price', 'stock', 'category'];
  
        fields.forEach(fieldId => {
          const field = document.getElementById(fieldId);
          validateField(field);
          if (field.classList.contains('error')) {
            isValid = false;
          }
        });
  
        const totalImages = getTotalImages();
        const imageError = document.getElementById('imageError') || document.createElement('div');
        imageError.id = 'imageError';
        imageError.className = 'text-danger';
        imageError.innerHTML = '';
        imageUpload.parentNode.appendChild(imageError);
  
        if (totalImages !== 3) {
          imageError.innerHTML = `Exactly 3 images are required. Currently you have ${totalImages} images.`;
          isValid = false;
        }
  
        return isValid;
      }
  
      function showError(field, errorElement, message) {
        errorElement.innerHTML = message;
        field.classList.add('error');
      }
  
      const inputs = document.querySelectorAll('.form-control, .form-select');
      inputs.forEach(input => {
        input.addEventListener('input', function () {
          validateField(this);
        });
        input.addEventListener('change', function () {
          validateField(this);
        });
      });
  
      window.addEventListener('click', function (event) {
        if (event.target === cropModal) {
          closeCropModal();
        }
      });
  
      // Initialize hidden inputs
      updateHiddenInputs();

      // Ensure price and stock are whole numbers on load
      const priceInput = document.getElementById('price');
      const stockInput = document.getElementById('stock');
      if (priceInput.value) {
        priceInput.value = parseInt(priceInput.value);
      }
      if (stockInput.value) {
        stockInput.value = parseInt(stockInput.value);
      }
    });
</script>

<%- include('../partials/admin/footer') %>