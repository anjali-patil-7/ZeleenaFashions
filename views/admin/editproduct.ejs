<%- include('../partials/admin/header') %>

<style>
    .preview-box {
        margin-bottom: 15px;
    }
    .preview-placeholder {
        border: 2px dashed #ccc;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
    }
    .preview-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border: 1px solid #ddd;
    }
    .form-control.error {
        border-color: #dc3545;
    }
    .form-select.error {
        border-color: #dc3545;
    }
    .text-danger {
        font-size: 0.875em;
        margin-top: 5px;
    }
</style>

<section class="content-main">
    <div class="content-header">
        <div>
            <h1 class="content-title card-title">Edit Product</h1>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <% if (messages.error && messages.error.length > 0) { %>
                    <div class="alert alert-danger">
                        <%= messages.error %>
                    </div>
                <% } %>
                <% if (messages.success && messages.success.length > 0) { %>
                    <div class="alert alert-success">
                        <%= messages.success %>
                    </div>
                <% } %>
                <% if (errors && errors.length > 0) { %>
                    <div class="alert alert-danger">
                        <ul>
                            <% errors.forEach(error => { %>
                                <li><%= error %></li>
                            <% }) %>
                        </ul>
                    </div>
                <% } %>
                <form 
                id="editProductForm" 
                method="post" 
                action="/admin/editproduct/<%= product._id %>" 
                enctype="multipart/form-data"
                >
                    <input type="hidden" name="id" value="<%= product._id %>">

                    <div class="mb-4">
                        <label for="name" class="form-label">Product Name</label>
                        <input 
                            type="text" 
                            class="form-control" 
                            id="name" 
                            name="name" 
                            value="<%= product.productName %>" 
                            required 
                        />
                        <div id="nameError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="description" class="form-label">Description</label>
                        <textarea 
                            class="form-control" 
                            id="description" 
                            name="description" 
                            required
                        ><%= product.description %></textarea>
                        <div id="descriptionError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="price" class="form-label">Price</label>
                        <input 
                            type="number" 
                            class="form-control" 
                            id="price" 
                            name="price" 
                            required 
                            value="<%= product.price %>" 
                            min="0" 
                            step="0.01"
                        />
                        <div id="priceError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="stock" class="form-label">Stock Quantity</label>
                        <input 
                            type="number" 
                            class="form-control" 
                            id="stock" 
                            name="stock" 
                            required 
                            value="<%= product.totalStock %>" 
                            min="0"
                        />
                        <div id="stockError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="category" class="form-label">Category</label>
                        <select 
                            class="form-select" 
                            id="category" 
                            name="category" 
                            required
                        >
                            <option value="" disabled>Select a category</option>
                            <% categories.forEach(function(category) { %>
                                <option value="<%= category._id %>" <%= (product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>>
                                    <%= category.name %>
                                </option>
                            <% }) %>
                        </select>
                        <div id="categoryError" class="text-danger"></div>
                    </div>

                    <!-- Image Preview Section -->
                    <div class="mb-4">
                        <label for="imageUpload" class="form-label">Upload New Images</label>
                        <input type="file" id="imageUpload" class="form-control" accept="image/*" multiple />
                        <div id="cropperModalContainer"></div>
                    </div>
                    <a href="/admin/editimage/<%= product._id %>" class="btn btn-dark">Edit Images</a>
                    <div class="d-flex justify-content-center mt-3">
                        <button type="submit" class="btn btn-dark">Update Product</button>
                    </div>  
                </form>
                <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                      <div class="modal-content">
                        <div class="modal-body">
                          <div>
                            <img id="cropperImage" style="max-width: 100%; display: block;" />
                          </div>
                        </div>
                        <div class="modal-footer">
                          <button type="button" id="cropImageBtn" class="btn btn-primary">Crop & Save</button>
                          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                      </div>
                    </div>
                  </div>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('editProductForm');
        
        // Form submission handler
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (validateForm()) {
                this.submit();
            }
        });

        // Real-time validation
        const inputs = document.querySelectorAll('.form-control, .form-select');
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                validateField(this);
            });
            input.addEventListener('change', function() {
                validateField(this);
            });
        });

        function validateField(field) {
            const errorElement = document.getElementById(field.id + 'Error');
            errorElement.innerHTML = '';
            field.classList.remove('error');

            switch(field.id) {
                case 'name':
                    const name = field.value.trim();
                    if (!name) {
                        showError(field, errorElement, 'Product name is required');
                    } else if (name.length < 2 || name.length > 100) {
                        showError(field, errorElement, 'Name must be 2-100 characters long');
                    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                        showError(field, errorElement, 'Name should only contain letters and spaces, no numbers allowed');
                    }
                    break;

                case 'description':
                    const description = field.value.trim();
                    if (!description) {
                        showError(field, errorElement, 'Product description is required');
                    } else if (description.length < 10 || description.length > 1000) {
                        showError(field, errorElement, 'Description must be 10-1000 characters long');
                    } else if (!/^[a-zA-Z\s]+$/.test(description)) {
                        showError(field, errorElement, 'Description should only contain letters and spaces, no numbers allowed');
                    }
                    break;

                case 'price':
                    const price = parseFloat(field.value);
                    if (!field.value || isNaN(price) || price <= 0) {
                        showError(field, errorElement, 'Price must be greater than 0');
                    } else if (price > 1000000) {
                        showError(field, errorElement, 'Price cannot exceed 1,000,000');
                    }
                    break;

                case 'stock':
                    const stock = parseInt(field.value);
                    if (!field.value || isNaN(stock) || stock < 0) {
                        showError(field, errorElement, 'Stock must be 0 or greater');
                    } else if (stock > 10000) {
                        showError(field, errorElement, 'Stock cannot exceed 10,000');
                    }
                    break;

                case 'category':
                    if (!field.value) {
                        showError(field, errorElement, 'Please select a category');
                    }
                    break;
            }
        }

        function validateForm() {
            let isValid = true;
            const fields = ['name', 'description', 'price', 'stock', 'category'];
            
            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                validateField(field);
                if (field.classList.contains('error')) {
                    isValid = false;
                }
            });

            return isValid;
        }

        function showError(field, errorElement, message) {
            errorElement.innerHTML = message;
            field.classList.add('error');
        }
    });
</script>
<script>
    let cropper;
    const imageInput = document.getElementById('imageUpload');
    const cropperImage = document.getElementById('cropperImage');

    imageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = () => {
                cropperImage.src = reader.result;
                const modal = new bootstrap.Modal(document.getElementById('cropperModal'));
                modal.show();
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById('cropperModal').addEventListener('shown.bs.modal', function () {
        cropper = new Cropper(cropperImage, {
            aspectRatio: 1,
            viewMode: 1,
        });
    });

    document.getElementById('cropperModal').addEventListener('hidden.bs.modal', function () {
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
    });

    document.getElementById('cropImageBtn').addEventListener('click', () => {
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
        });

        canvas.toBlob((blob) => {
            const formData = new FormData();
            formData.append('croppedImage', blob, 'cropped.jpg');
            formData.append('id', "<%= product._id %>");

            fetch('/admin/updatecroppedimage', {
                method: 'POST',
                body: formData
            }).then(res => res.json())
              .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert(data.message || 'Image upload failed');
                }
              });
        }, 'image/jpeg');
    });
</script>


<%- include('../partials/admin/footer') %>