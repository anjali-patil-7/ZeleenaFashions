<%- include('../partials/admin/header') %>

<style>
    .preview-box {
        margin-bottom: 15px;
    }
    .preview-placeholder {
        border: 2px dashed #ccc;
        height: 200px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
    }
    .preview-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border: 1px solid #ddd;
    }
    .form-control.error, .form-select.error {
        border-color: #dc3545;
    }
    .text-danger {
        font-size: 0.875em;
        margin-top: 5px;
    }
    .image-preview-container {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 20px;
    }
    .image-preview-item {
        position: relative;
        width: 200px;
        height: 200px;
        border: 1px solid #ddd;
        overflow: hidden;
    }
    .image-preview-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .image-actions {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0,0,0,0.7);
        display: flex;
        justify-content: space-around;
        padding: 5px;
    }
    .image-actions button {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        font-size: 14px;
    }
    .image-actions button:hover {
        text-decoration: underline;
    }
</style>

<section class="content-main">
    <div class="content-header">
        <h1 class="content-title card-title">Edit Product</h1>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-8">
                <% if (messages.error && messages.error.length > 0) { %>
                    <div class="alert alert-danger"><%= messages.error %></div>
                <% } %>
                <% if (messages.success && messages.success.length > 0) { %>
                    <div class="alert alert-success"><%= messages.success %></div>
                <% } %>
                <% if (errors && errors.length > 0) { %>
                    <div class="alert alert-danger">
                        <ul>
                            <% errors.forEach(error => { %>
                                <li><%= error %></li>
                            <% }) %>
                        </ul>
                    </div>
                <% } %>
                <form 
                    id="editProductForm" 
                    method="post" 
                    action="/admin/editproduct/<%= product._id %>" 
                    enctype="multipart/form-data"
                >
                    <input type="hidden" name="id" value="<%= product._id %>">

                    <div class="mb-4">
                        <label for="name" class="form-label">Product Name</label>
                        <input 
                            type="text" 
                            class="form-control" 
                            id="name" 
                            name="name" 
                            value="<%= product.productName %>" 
                            required 
                        />
                        <div id="nameError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="description" class="form-label">Description</label>
                        <textarea 
                            class="form-control" 
                            id="description" 
                            name="description" 
                            required
                        ><%= product.description %></textarea>
                        <div id="descriptionError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="price" class="form-label">Price</label>
                        <input 
                            type="number" 
                            class="form-control" 
                            id="price" 
                            name="price" 
                            required 
                            value="<%= product.price %>" 
                            min="0" 
                            step="0.01"
                        />
                        <div id="priceError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="stock" class="form-label">Stock Quantity</label>
                        <input 
                            type="number" 
                            class="form-control" 
                            id="stock" 
                            name="stock" 
                            required 
                            value="<%= product.totalStock %>" 
                            min="0"
                        />
                        <div id="stockError" class="text-danger"></div>
                    </div>

                    <div class="mb-4">
                        <label for="category" class="form-label">Category</label>
                        <select 
                            class="form-select" 
                            id="category" 
                            name="category" 
                            required
                        >
                            <option value="" disabled>Select a category</option>
                            <% categories.forEach(function(category) { %>
                                <option value="<%= category._id %>" <%= (product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>>
                                    <%= category.name %>
                                </option>
                            <% }) %>
                        </select>
                        <div id="categoryError" class="text-danger"></div>
                    </div>

                    <!-- Current Images Preview and Removal -->
                    <div class="mb-4">
                        <label class="form-label">Current Images</label>
                        <div class="image-preview-container">
                            <% if (product.productImage && product.productImage.length > 0) { %>
                                <% product.productImage.forEach(function(image, index) { %>
                                    <div class="image-preview-item" data-index="<%= index %>">
                                        <img src="<%= image %>" alt="Product Image <%= index + 1 %>">
                                        <div class="image-actions">
                                            <button type="button" class="remove-image" data-index="<%= index %>">Remove</button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p>No images available</p>
                            <% } %>
                        </div>
                        <input type="hidden" id="removedImages" name="removedImages" value="">
                    </div>

                    <!-- Image Upload Section -->
                    <div class="mb-4">
                        <label for="imageUpload" class="form-label">Upload New Images</label>
                        <input type="file" id="imageUpload" name="images" class="form-control" accept="image/*" multiple />
                        <div id="newImagesPreview" class="d-flex flex-wrap mt-2 gap-2"></div>
                    </div>

                    <div class="d-flex justify-content-center mt-3">
                        <button type="submit" class="btn btn-dark">Update Product</button>
                    </div>  
                </form>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('editProductForm');
        const imageUpload = document.getElementById('imageUpload');
        const newImagesPreview = document.getElementById('newImagesPreview');
        const removedImagesInput = document.getElementById('removedImages');
        
        let removedImages = [];
        
        // Form submission with debugging
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (validateForm()) {
                // Update removedImages input
                removedImagesInput.value = JSON.stringify(removedImages);
                
                // Log form data for debugging
                const formData = new FormData(form);
                console.log('Form Data:');
                for (let [key, value] of formData.entries()) {
                    console.log(`${key}: ${value}`);
                }
                
                // Submit the form
                form.submit();
            }
        });

        // Handle new image uploads
        imageUpload.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            
            // Clear existing previews
            newImagesPreview.innerHTML = '';
            
            // Create previews for each file
            files.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'position-relative';
                    previewItem.style.width = '100px';
                    previewItem.style.height = '100px';
                    previewItem.style.overflow = 'hidden';
                    previewItem.style.marginRight = '10px';
                    
                    const img = document.createElement('img');
                    img.src = event.target.result;
                    img.className = 'w-100 h-100';
                    img.style.objectFit = 'cover';
                    
                    previewItem.appendChild(img);
                    newImagesPreview.appendChild(previewItem);
                };
                reader.readAsDataURL(file);
            });
        });

        // Handle image removal
        document.querySelectorAll('.remove-image').forEach(button => {
            button.addEventListener('click', function() {
                const imageIndex = parseInt(this.getAttribute('data-index'));
                if (!removedImages.includes(imageIndex)) {
                    removedImages.push(imageIndex);
                }
                this.closest('.image-preview-item').style.display = 'none';
            });
        });

        // Form validation
        function validateField(field) {
            const errorElement = document.getElementById(field.id + 'Error');
            errorElement.innerHTML = '';
            field.classList.remove('error');

            switch(field.id) {
                case 'name':
                    const name = field.value.trim();
                    if (!name) {
                        showError(field, errorElement, 'Product name is required');
                    } else if (name.length < 2 || name.length > 100) {
                        showError(field, errorElement, 'Name must be 2-100 characters long');
                    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
                        showError(field, errorElement, 'Name should only contain letters and spaces');
                    }
                    break;

                case 'description':
                    const description = field.value;
                    if (!description) {
                        showError(field, errorElement, 'Description is required');
                    } else {
                        const trimmedDescription = description.trim();
                        if (trimmedDescription.length < 10 || trimmedDescription.length > 1000) {
                            showError(field, errorElement, 'Description must be 10–1000 characters long');
                        } else if (!/^[a-zA-Z0-9\s,.]+$/.test(trimmedDescription)) {
                            showError(field, errorElement, 'Description can only contain letters, numbers, spaces, periods, and commas');
                        }
                    }
                    break;

                case 'price':
                    const price = parseFloat(field.value);
                    if (!field.value || isNaN(price) || price <= 0) {
                        showError(field, errorElement, 'Price must be greater than 0');
                    } else if (price > 1000000) {
                        showError(field, errorElement, 'Price cannot exceed 1,000,000');
                    }
                    break;

                case 'stock':
                    const stock = parseInt(field.value);
                    if (!field.value || isNaN(stock) || stock < 0) {
                        showError(field, errorElement, 'Stock must be 0 or greater');
                    } else if (stock > 10000) {
                        showError(field, errorElement, 'Stock cannot exceed 10,000');
                    }
                    break;

                case 'category':
                    if (!field.value) {
                        showError(field, errorElement, 'Please select a category');
                    }
                    break;
            }
        }

        function validateForm() {
            let isValid = true;
            const fields = ['name', 'description', 'price', 'stock', 'category'];
            
            fields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                validateField(field);
                if (field.classList.contains('error')) {
                    isValid = false;
                }
            });

            return isValid;
        }

        function showError(field, errorElement, message) {
            errorElement.innerHTML = message;
            field.classList.add('error');
        }

        // Real-time validation
        const inputs = document.querySelectorAll('.form-control, .form-select');
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                validateField(this);
            });
            input.addEventListener('change', function() {
                validateField(this);
            });
        });
    });
</script>

<%- include('../partials/admin/footer') %>