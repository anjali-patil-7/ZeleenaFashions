<%- include('../partials/admin/header') %>

<style>
  .preview-box {
    margin-bottom: 15px;
  }
  .preview-placeholder {
    border: 2px dashed #ccc;
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
  }
  .preview-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border: 1px solid #ddd;
  }
  .form-control.error {
    border-color: #dc3545;
  }
  .form-select.error {
    border-color: #dc3545;
  }
  .text-danger {
    font-size: 0.875em;
    margin-top: 5px;
  }
</style>

<section class="content-main">
  <div class="content-header">
    <div>
      <h1 class="content-title card-title">Add Product</h1>
    </div>
  </div>
  <div class="card-body">
    <div class="row">
      <div class="col-md-8">
        <% if (messages.error && messages.error.length > 0) { %>
          <div class="alert alert-danger">
            <%= messages.error %>
          </div>
        <% } %>
        <% if (messages.success && messages.success.length > 0) { %>
          <div class="alert alert-success">
            <%= messages.success %>
          </div>
        <% } %>
        <% if (errors && errors.length > 0) { %>
          <div class="alert alert-danger">
            <ul>
              <% errors.forEach(error => { %>
                <li><%= error %></li>
              <% }) %>
            </ul>
          </div>
        <% } %>
        <form
          id="productForm"
          method="post"
          action="/admin/addproduct"
          enctype="multipart/form-data"
        >
          <div class="mb-4">
            <label for="name" class="form-label">Product Name</label>
            <input
              type="text"
              placeholder="Type here"
              class="form-control"
              id="name"
              name="name"
              value="<%= product && product.name ? product.name : '' %>"
              required
            />
            <div id="nameError" class="text-danger"></div>
          </div>

          <div class="mb-4">
            <label for="description" class="form-label">Product Description</label>
            <textarea
              placeholder="Type here"
              class="form-control"
              id="description"
              name="description"
              required
            ><%= product && product.description ? product.description : '' %></textarea>
            <div id="descriptionError" class="text-danger"></div>
          </div>

          <div class="mb-4">
            <label for="price" class="form-label">Price</label>
            <input
              type="number"
              placeholder="Enter price"
              class="form-control"
              id="price"
              name="price"
              min="0.01"
              step="0.01"
              value="<%= product && product.price ? product.price : '' %>"
              required
            />
            <div id="priceError" class="text-danger"></div>
          </div>

          <div class="mb-4">
            <label for="stock" class="form-label">Stock Quantity</label>
            <input
              type="number"
              placeholder="Enter stock quantity"
              class="form-control"
              id="stock"
              name="stock"
              min="0"
              value="<%= product && product.totalStock ? product.totalStock : '' %>"
              required
            />
            <div id="stockError" class="text-danger"></div>
          </div>

          <div class="mb-4">
            <label for="category" class="form-label">Category</label>
            <select id="category" name="category" class="form-select" required>
              <option value="" disabled selected>Select a category</option>
              <% categoryData.forEach(category => { %>
              <option value="<%= category._id %>" <%= product && product.category && product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                <%= category.name %>
              </option>
              <% }) %>
            </select>
            <div id="categoryError" class="text-danger"></div>
          </div>

          <div class="mb-4">
            <label for="images" class="form-label">Product Images (Exactly 3 required, JPG/JPEG/PNG only, max 5MB each)</label>
            <input
              type="file"
              class="form-control"
              id="images"
              name="images"
              accept="image/jpeg,image/jpg,image/png"
              multiple
              required
            />
            <div id="imagesError" class="text-danger"></div>
          </div>

          <!-- Image Preview Section -->
          <div class="mb-4">
            <label class="form-label">Image Previews</label>
            <div class="row" id="imagePreview">
              <div class="col-md-4 preview-box">
                <div class="preview-placeholder">
                  <span>Image 1</span>
                </div>
              </div>
              <div class="col-md-4 preview-box">
                <div class="preview-placeholder">
                  <span>Image 2</span>
                </div>
              </div>
              <div class="col-md-4 preview-box">
                <div class="preview-placeholder">
                  <span>Image 3</span>
                </div>
              </div>
            </div>
          </div>

          <button type="submit" class="btn btn-dark">Add Product</button>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('productForm');
    
    // Form submission handler
    form.addEventListener('submit', function(event) {
      event.preventDefault();
      if (validateForm()) {
        this.submit();
      }
    });

    // Real-time validation
    const inputs = document.querySelectorAll('.form-control, .form-select');
    inputs.forEach(input => {
      input.addEventListener('input', function() {
        validateField(this);
      });
      input.addEventListener('change', function() {
        validateField(this);
      });
    });

    function validateField(field) {
      const errorElement = document.getElementById(field.id + 'Error');
      errorElement.innerHTML = '';
      field.classList.remove('error');

      switch(field.id) {
        case 'name':
          const name = field.value.trim();
          if (!name) {
            showError(field, errorElement, 'Product name is required');
          } else if (name.length < 2 || name.length > 100) {
            showError(field, errorElement, 'Name must be 2-100 characters long');
          }
          break;

        case 'description':
          const description = field.value.trim();
          if (!description) {
            showError(field, errorElement, 'Product description is required');
          } else if (description.length < 10 || description.length > 1000) {
            showError(field, errorElement, 'Description must be 10-1000 characters long');
          }
          break;

        case 'price':
          const price = parseFloat(field.value);
          if (!field.value || isNaN(price) || price <= 0) {
            showError(field, errorElement, 'Price must be greater than 0');
          } else if (price > 1000000) {
            showError(field, errorElement, 'Price cannot exceed 1,000,000');
          }
          break;

        case 'stock':
          const stock = parseInt(field.value);
          if (!field.value || isNaN(stock) || stock < 0) {
            showError(field, errorElement, 'Stock must be 0 or greater');
          } else if (stock > 10000) {
            showError(field, errorElement, 'Stock cannot exceed 10,000');
          }
          break;

        case 'category':
          if (!field.value) {
            showError(field, errorElement, 'Please select a category');
          }
          break;

        case 'images':
          const files = field.files;
          if (files.length > 0) {
            handleImageValidation(files, field, errorElement);
          } else {
            showError(field, errorElement, 'Exactly 3 images are required');
          }
          break;
      }
    }

    function validateForm() {
      let isValid = true;
      const fields = ['name', 'description', 'price', 'stock', 'category', 'images'];
      
      fields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        validateField(field);
        if (field.classList.contains('error')) {
          isValid = false;
        }
      });

      return isValid;
    }

    function showError(field, errorElement, message) {
      errorElement.innerHTML = message;
      field.classList.add('error');
    }

    function handleImageValidation(files, field, errorElement) {
      if (files.length !== 3) {
        showError(field, errorElement, 'Exactly 3 images are required');
        return;
      }

      const validExtensions = ['.jpg', '.jpeg', '.png'];
      const maxSize = 5 * 1024 * 1024; // 5MB
      const previewBoxes = document.querySelectorAll('.preview-box');

      // Reset previews
      previewBoxes.forEach((box, index) => {
        box.innerHTML = `<div class="preview-placeholder"><span>Image ${index + 1}</span></div>`;
      });

      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const fileName = file.name.toLowerCase();

        if (!validExtensions.some(ext => fileName.endsWith(ext))) {
          showError(field, errorElement, 'Only JPG, JPEG, or PNG files are allowed');
          return;
        }

        if (file.size > maxSize) {
          showError(field, errorElement, 'Each image must be less than 5MB');
          return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
          previewBoxes[i].innerHTML = `
            <img src="${e.target.result}" 
                 class="preview-image" 
                 alt="Preview ${i + 1}">
          `;
        };
        reader.readAsDataURL(file);
      }
    }
  });
</script>

<%- include('../partials/admin/footer') %>