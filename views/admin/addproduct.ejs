<%- include('../partials/admin/header') %>

<main class="main-wrap">
    <section class="content-main">
        <div class="content-header">
            <h2 class="content-title">Add New Product</h2>
            <a href="/admin/product" class="btn btn-light">Back to Products</a>
        </div>
        <div class="card mb-4">
            <div class="card-body">
                <!-- Display server-side error/success messages -->
                <% if (messages && (messages.error || messages.success)) { %>
                    <div class="alert <%= messages.error ? 'alert-danger' : 'alert-success' %>" role="alert">
                        <%= messages.error || messages.success %>
                    </div>
                <% } %>
                <!-- Display server-side validation errors -->
                <% if (errors && errors.length > 0) { %>
                    <div class="alert alert-danger" role="alert">
                        <ul>
                            <% errors.forEach(error => { %>
                                <li><%= error %></li>
                            <% }) %>
                        </ul>
                    </div>
                <% } %>
                <form id="addProductForm" action="/admin/addproduct" method="POST" enctype="multipart/form-data">
                    <div class="mb-4">
                        <label for="name" class="form-label">Product Name</label>
                        <input type="text" class="form-control" id="name" name="name" value="<%= product && product.name ? product.name : '' %>" required>
                        <div id="nameError" class="invalid-feedback"></div>
                    </div>
                    <div class="mb-4">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="4" required><%= product && product.description ? product.description : '' %></textarea>
                        <div id="descriptionError" class="invalid-feedback"></div>
                    </div>
                    <div class="mb-4">
                        <label for="category" class="form-label">Category</label>
                        <select class="form-select" id="category" name="category" required>
                            <option value="">Select a category</option>
                            <% categories.forEach(category => { %>
                                <option value="<%= category._id %>" <%= product && product.category === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                            <% }) %>
                        </select>
                        <div id="categoryError" class="invalid-feedback"></div>
                    </div>
                    <div class="mb-4">
                        <label for="price" class="form-label">Price ($)</label>
                        <input type="number" step="0.01" class="form-control" id="price" name="price" value="<%= product && product.price ? product.price : '' %>" required>
                        <div id="priceError" class="invalid-feedback"></div>
                    </div>
                    <div class="mb-4">
                        <label for="stock" class="form-label">Total Stock</label>
                        <input type="number" class="form-control" id="stock" name="stock" value="<%= product && product.stock ? product.stock : '' %>" required>
                        <div id="stockError" class="invalid-feedback"></div>
                    </div>
                    <div class="mb-4">
                        <label for="images" class="form-label">Product Images</label>
                        <input type="file" class="form-control" id="images" name="images" accept="image/jpeg,image/jpg,image/png" multiple required>
                        <small class="form-text text-muted">Upload exactly 3 images (JPEG, JPG, PNG). Max 5MB each. Images will be cropped to 800x800px.</small>
                        <div id="imagesError" class="invalid-feedback"></div>
                        <div id="imagePreview" class="mt-3 d-flex flex-wrap"></div>
                        <div id="croppieContainer" style="display: none; margin-top: 10px;"></div>
                        <button type="button" id="cropButton" class="btn btn-secondary mt-2" style="display: none;">Crop Image</button>
                    </div>
                    <div class="mb-4">
                        <label for="status" class="form-label">Status</label>
                        <select class="form-select" id="status" name="status">
                            <option value="true" <%= product && product.status ? 'selected' : '' %>>Active</option>
                            <option value="false" <%= product && !product.status ? 'selected' : '' %>>Inactive</option>
                        </select>
                    </div>
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary">Add Product</button>
                    </div>
                </form>
            </div>
        </div>
    </section>
</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.css" rel="stylesheet">

<script>
const imageInput = document.getElementById('images');
const imagePreview = document.getElementById('imagePreview');
const croppieContainer = document.getElementById('croppieContainer');
const cropButton = document.getElementById('cropButton');
const form = document.getElementById('addProductForm');
const maxImages = 3;
let croppieInstance = null;
let currentFileIndex = 0;
let originalFiles = [];
let croppedImages = [];

function showError(elementId, message) {
    const element = document.getElementById(elementId);
    element.textContent = message;
    element.style.display = message ? 'block' : 'none';
    document.getElementById(elementId.replace('Error', '')).classList.toggle('is-invalid', !!message);
}

function validateField(field, value) {
    if (field === 'name') {
        if (!value || value.trim().length < 2 || value.trim().length > 100) {
            return 'Product name must be 2-100 characters long';
        } else if (!/^[a-zA-Z\s]+$/.test(value.trim())) {
            return 'Product name should only contain letters and spaces';
        }
    } else if (field === 'description') {
        if (!value || value.trim().length < 10 || value.trim().length > 1000) {
            return 'Description must be 10-1000 characters long';
        } else if (!/^[a-zA-Z\s]+$/.test(value.trim())) {
            return 'Description should only contain letters and spaces';
        }
    } else if (field === 'price') {
        const num = parseFloat(value);
        if (!value || isNaN(num) || num <= 0 || num > 1000000) {
            return 'Price must be between 0.01 and 1,000,000';
        }
    } else if (field === 'stock') {
        const num = parseInt(value);
        if (!value || isNaN(num) || num < 0 || num > 10000) {
            return 'Stock must be between 0 and 10,000';
        }
    } else if (field === 'category') {
        if (!value) {
            return 'Category is required';
        }
    }
    return '';
}

function validateImages(files) {
    const validExtensions = ['image/jpeg', 'image/jpg', 'image/png'];
    const maxSize = 5 * 1024 * 1024;
    const errors = [];

    if (!files || files.length !== maxImages) {
        errors.push(`Exactly ${maxImages} images are required`);
    } else {
        Array.from(files).forEach((file, index) => {
            if (!validExtensions.includes(file.type)) {
                errors.push(`Image ${index + 1} must be JPG, JPEG, or PNG`);
            }
            if (file.size > maxSize) {
                errors.push(`Image ${index + 1} must be less than 5MB`);
            }
        });
    }
    return errors;
}

function validateForm() {
    const fields = ['name', 'description', 'price', 'stock', 'category'];
    let isValid = true;

    fields.forEach(field => {
        const value = document.getElementById(field).value;
        const error = validateField(field, value);
        showError(`${field}Error`, error);
        if (error) isValid = false;
    });

    const imageErrors = validateImages(croppedImages.length === maxImages ? croppedImages : imageInput.files);
    showError('imagesError', imageErrors.join(', '));
    if (imageErrors.length > 0) isValid = false;

    return isValid;
}

function initializeCroppie(file) {
    croppieContainer.innerHTML = '';
    const croppieEl = document.createElement('div');
    croppieContainer.appendChild(croppieEl);
    croppieContainer.style.display = 'block';
    cropButton.style.display = 'block';

    croppieInstance = new Croppie(croppieEl, {
        viewport: { width: 800, height: 800, type: 'square' },
        boundary: { width: 600, height: 600 }, // Increased boundary for better usability
        showZoomer: true,
        enableOrientation: false,
        enforceBoundary: true, // Ensure image stays within viewport
        mouseWheelZoom: 'ctrl' // Require Ctrl key for zooming to prevent accidental changes
    });

    const reader = new FileReader();
    reader.onload = (e) => {
        croppieInstance.bind({
            url: e.target.result,
            zoom: 'viewport' // Automatically fit image to viewport
        });
    };
    reader.readAsDataURL(file);
}

function updatePreview() {
    imagePreview.innerHTML = '';
    croppedImages.forEach((file, index) => {
        const reader = new FileReader();
        reader.onload = (event) => {
            const previewImg = document.createElement('img');
            previewImg.src = event.target.result;
            previewImg.style.maxWidth = '100px';
            previewImg.style.margin = '5px';
            previewImg.alt = `Preview ${index + 1}`;
            imagePreview.appendChild(previewImg);
        };
        reader.readAsDataURL(file);
    });
}

imageInput.addEventListener('change', (e) => {
    const files = e.target.files;
    originalFiles = Array.from(files);
    croppedImages = [];
    currentFileIndex = 0;
    imagePreview.innerHTML = '';
    croppieContainer.style.display = 'none';
    cropButton.style.display = 'none';

    const imageErrors = validateImages(files);
    showError('imagesError', imageErrors.join(', '));

    if (imageErrors.length === 0 && files.length === maxImages) {
        initializeCroppie(originalFiles[currentFileIndex]);
    } else {
        imageInput.value = '';
    }
});

cropButton.addEventListener('click', async () => {
    if (!croppieInstance) return;

    const cropped = await croppieInstance.result({
        type: 'blob',
        size: { width: 800, height: 800 },
        format: originalFiles[currentFileIndex].type.split('/')[1],
        quality: 0.8
    });

    const croppedFile = new File([cropped], originalFiles[currentFileIndex].name, {
        type: originalFiles[currentFileIndex].type
    });
    croppedImages.push(croppedFile);

    currentFileIndex++;
    if (currentFileIndex < originalFiles.length) {
        initializeCroppie(originalFiles[currentFileIndex]);
    } else {
        croppieContainer.style.display = 'none';
        cropButton.style.display = 'none';
        croppieInstance.destroy();
        croppieInstance = null;

        const dataTransfer = new DataTransfer();
        croppedImages.forEach(file => dataTransfer.items.add(file));
        imageInput.files = dataTransfer.files;
        updatePreview();
    }
});

form.addEventListener('submit', (e) => {
    if (!validateForm()) {
        e.preventDefault();
    }
});

document.getElementById('name').addEventListener('input', () => {
    showError('nameError', validateField('name', document.getElementById('name').value));
});

document.getElementById('description').addEventListener('input', () => {
    showError('descriptionError', validateField('description', document.getElementById('description').value));
});

document.getElementById('price').addEventListener('input', () => {
    showError('priceError', validateField('price', document.getElementById('price').value));
});

document.getElementById('stock').addEventListener('input', () => {
    showError('stockError', validateField('stock', document.getElementById('stock').value));
});

document.getElementById('category').addEventListener('change', () => {
    showError('categoryError', validateField('category', document.getElementById('category').value));
});
</script>

<%- include('../partials/admin/footer') %>