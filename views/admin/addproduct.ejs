<%- include('../partials/admin/header') %>

<!-- <style>
    .alert {
        padding: 12px 16px;
        margin-bottom: 20px;
        border-radius: 4px;
        font-family: 'Montserrat', sans-serif;
        font-weight: 500;
        border: 1px solid #FFD700; /* Gold border */
        background-color: #ffffff; /* White background */
        color: #000000; /* Black text */
    }
    .alert ul {
        margin: 0;
        padding-left: 20px;
    }
</style> -->

<main class="main-wrap">
<section class="content-main" style="background: #ffffff; padding: 20px; min-height: 80vh; width: 100%; margin: 0 auto; padding-right: 100px;">

        <div class="content-header">
            <h2 class="content-title" style="font-family: 'Montserrat', sans-serif; font-weight: 600; color: #000000;">Add New Product</h2>
            <a href="/admin/product" 
               class="btn" 
               style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; text-decoration: none; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
               onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
               onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                Back to Products
            </a>
        </div>
        <div class="card mb-4" style="background-color: #ffffff; border: 1px solid #000000; border-radius: 4px;">
            <div class="card-body" style="padding: 20px;">
                <!-- Display server-side error/success messages -->
                <% if (messages && (messages.error || messages.success)) { %>
                    <div class="alert" role="alert">
                        <%= messages.error || messages.success %>
                    </div>
                <% } %>
                <!-- Display server-side validation errors -->
                <% if (errors && errors.length > 0) { %>
                    <div class="alert" role="alert">
                        <ul>
                            <% errors.forEach(error => { %>
                                <li><%= error %></li>
                            <% }) %>
                        </ul>
                    </div>
                <% } %>
                <!-- Client-side validation errors -->
                <div id="validationErrors" class="alert" role="alert" style="display: none;">
                    <ul id="errorList"></ul>
                </div>
                <form id="addProductForm" action="/admin/addproduct" method="POST" enctype="multipart/form-data">
                    <div class="mb-4">
                        <label for="name" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Product Name</label>
                        <input type="text" 
                               class="form-control" 
                               id="name" 
                               name="name" 
                               value="<%= product && product.name ? product.name : '' %>" 
                               required
                               style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                    </div>
                    <div class="mb-4">
                        <label for="description" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Description</label>
                        <textarea class="form-control" 
                                  id="description" 
                                  name="description" 
                                  rows="4" 
                                  required
                                  style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;"><%= product && product.description ? product.description : '' %></textarea>
                    </div>
                    <div class="mb-4">
                        <label for="category" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Category</label>
                        <select class="form-select" 
                                id="category" 
                                name="category" 
                                required
                                style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                            <option value="">Select a category</option>
                            <% categories.forEach(category => { %>
                                <option value="<%= category._id %>" <%= product && product.category === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                            <% }) %>
                        </select>
                    </div>
                    <div class="mb-4">
                        <label for="price" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Price ($)</label>
                        <input type="number" 
                               step="0.01" 
                               class="form-control" 
                               id="price" 
                               name="price" 
                               value="<%= product && product.price ? product.price : '' %>" 
                               required
                               style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                    </div>
                    <div class="mb-4">
                        <label for="stock" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Total Stock</label>
                        <input type="number" 
                               class="form-control" 
                               id="stock" 
                               name="stock" 
                               value="<%= product && product.stock ? product.stock : '' %>" 
                               required
                               style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                    </div>
                    <div class="mb-4">
                        <label for="images" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Product Images</label>
                        <input type="file" 
                               class="form-control" 
                               id="images" 
                               name="images" 
                               accept="image/jpeg,image/jpg,image/png" 
                               multiple 
                               required
                               style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                        <small class="form-text text-muted" style="color: #666; font-family: 'Montserrat', sans-serif;">Upload exactly 3 images (JPEG, JPG, PNG). Max 5MB each. Resize images below (default: 800x800px).</small>
                        <div class="mt-3">
                            <label for="resizeWidth" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Resize Width (px)</label>
                            <input type="number" 
                                   class="form-control" 
                                   id="resizeWidth" 
                                   value="800" 
                                   min="100" 
                                   max="2000"
                                   style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                            <label for="resizeHeight" class="form-label mt-2" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Resize Height (px)</label>
                            <input type="number" 
                                   class="form-control" 
                                   id="resizeHeight" 
                                   value="800" 
                                   min="100" 
                                   max="2000"
                                   style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                        </div>
                        <div id="imagePreview" class="mt-3 d-flex flex-wrap"></div>
                    </div>
                    <div class="mb-4">
                        <label for="status" class="form-label" style="color: #000000; font-family: 'Montserrat', sans-serif; font-weight: 500;">Status</label>
                        <select class="form-select" 
                                id="status" 
                                name="status"
                                style="background-color: #ffffff; border: 1px solid #000000; color: #000000; padding: 10px; border-radius: 4px; font-family: 'Montserrat', sans-serif;">
                            <option value="true" <%= product && product.status ? 'selected' : '' %>>Active</option>
                            <option value="false" <%= product && !product.status ? 'selected' : '' %>>Inactive</option>
                        </select>
                    </div>
                    <div class="d-grid">
                        <button type="submit" 
                                class="btn"
                                style="background-color: #000000; color: #FFD700; padding: 10px 20px; border: none; border-radius: 4px; font-family: 'Montserrat', sans-serif; font-weight: 500; transition: all 0.3s;"
                                onmouseover="this.style.backgroundColor='#FFD700'; this.style.color='#000000';"
                                onmouseout="this.style.backgroundColor='#000000'; this.style.color='#FFD700';">
                            Add Product
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </section>
</main>

<script>
// Client-side validation and image handling (unchanged from original)
const imageInput = document.getElementById('images');
const imagePreview = document.getElementById('imagePreview');
const resizeWidthInput = document.getElementById('resizeWidth');
const resizeHeightInput = document.getElementById('resizeHeight');
const form = document.getElementById('addProductForm');
const validationErrors = document.getElementById('validationErrors');
const errorList = document.getElementById('errorList');
const maxImages = 3;
let resizedImages = [];

function validateForm() {
    const errors = [];
    const name = document.getElementById('name').value;
    const description = document.getElementById('description').value;
    const price = document.getElementById('price').value;
    const stock = document.getElementById('stock').value;
    const category = document.getElementById('category').value;
    const files = imageInput.files;

    if (!name || name.trim().length < 2 || name.trim().length > 100) {
        errors.push('Product name must be 2-100 characters long');
    } else if (!/^[a-zA-Z\s]+$/.test(name.trim())) {
        errors.push('Product name should only contain letters and spaces, no numbers allowed');
    }

    if (!description || description.trim().length < 10 || description.trim().length > 1000) {
        errors.push('Description must be 10-1000 characters long');
    } else if (!/^[a-zA-Z\s]+$/.test(description.trim())) {
        errors.push('Description should only contain letters and spaces, no numbers allowed');
    }

    if (!price || isNaN(price) || parseFloat(price) <= 0 || parseFloat(price) > 1000000) {
        errors.push('Price must be between 0.01 and 1,000,000');
    }

    if (!stock || isNaN(stock) || parseInt(stock) < 0 || parseInt(stock) > 10000) {
        errors.push('Stock must be between 0 and 10,000');
    }

    if (!category) {
        errors.push('Category is required');
    }

    if (!files || files.length !== maxImages) {
        errors.push('Exactly 3 images are required');
    } else {
        const validExtensions = ['image/jpeg', 'image/jpg', 'image/png'];
        const maxSize = 5 * 1024 * 1024;
        Array.from(files).forEach((file, index) => {
            if (!validExtensions.includes(file.type)) {
                errors.push(`Image ${index + 1} must be JPG, JPEG, or PNG`);
            }
            if (file.size > maxSize) {
                errors.push(`Image ${index + 1} must be less than 5MB`);
            }
        });
    }

    if (errors.length > 0) {
        validationErrors.style.display = 'block';
        errorList.innerHTML = errors.map(error => `<li>${error}</li>`).join('');
        return false;
    } else {
        validationErrors.style.display = 'none';
        errorList.innerHTML = '';
        return true;
    }
}

imageInput.addEventListener('change', async (e) => {
    const files = e.target.files;
    imagePreview.innerHTML = '';
    resizedImages = [];

    if (files.length !== maxImages) {
        validationErrors.style.display = 'block';
        errorList.innerHTML = `<li>Exactly ${maxImages} images are required</li>`;
        e.target.value = '';
        return;
    }

    const validExtensions = ['image/jpeg', 'image/jpg', 'image/png'];
    const maxSize = 5 * 1024 * 1024;
    const invalidFiles = Array.from(files).some(file => !validExtensions.includes(file.type) || file.size > maxSize);

    if (invalidFiles) {
        validationErrors.style.display = 'block';
        errorList.innerHTML = Array.from(files)
            .map((file, index) => {
                const errors = [];
                if (!validExtensions.includes(file.type)) {
                    errors.push(`Image ${index + 1} must be JPG, JPEG, or PNG`);
                }
                if (file.size > maxSize) {
                    errors.push(`Image ${index + 1} must be less than 5MB`);
                }
                return errors;
            })
            .filter(errors => errors.length > 0)
            .map(errors => errors.map(error => `<li>${error}</li>`).join(''))
            .join('');
        e.target.value = '';
        return;
    }

    for (const file of files) {
        const resizedFile = await resizeImage(file, parseInt(resizeWidthInput.value), parseInt(resizeHeightInput.value));
        resizedImages.push(resizedFile);

        const reader = new FileReader();
        reader.onload = (event) => {
            const previewImg = document.createElement('img');
            previewImg.src = event.target.result;
            previewImg.style.maxWidth = '100px';
            previewImg.style.margin = '5px';
            imagePreview.appendChild(previewImg);
        };
        reader.readAsDataURL(resizedFile);
    }

    const dataTransfer = new DataTransfer();
    resizedImages.forEach(file => dataTransfer.items.add(file));
    imageInput.files = dataTransfer.files;
});

async function resizeImage(file, width, height) {
    return new Promise((resolve) => {
        const img = new Image();
        img.src = URL.createObjectURL(file);
        img.onload = () => {
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, width, height);
            canvas.toBlob((blob) => {
                const resizedFile = new File([blob], file.name, { type: file.type });
                resolve(resizedFile);
            }, file.type, 0.8);
        };
    });
}

resizeWidthInput.addEventListener('change', updatePreviews);
resizeHeightInput.addEventListener('change', updatePreviews);

async function updatePreviews() {
    if (resizedImages.length === 0) return;
    imagePreview.innerHTML = '';
    resizedImages = [];

    const files = imageInput.files;
    for (const file of files) {
        const resizedFile = await resizeImage(file, parseInt(resizeWidthInput.value), parseInt(resizeHeightInput.value));
        resizedImages.push(resizedFile);

        const reader = new FileReader();
        reader.onload = (event) => {
            const previewImg = document.createElement('img');
            previewImg.src = event.target.result;
            previewImg.style.maxWidth = '100px';
            previewImg.style.margin = '5px';
            imagePreview.appendChild(previewImg);
        };
        reader.readAsDataURL(resizedFile);
    }

    const dataTransfer = new DataTransfer();
    resizedImages.forEach(file => dataTransfer.items.add(file));
    imageInput.files = dataTransfer.files;
}

form.addEventListener('submit', (e) => {
    if (!validateForm()) {
        e.preventDefault();
    }
});
</script>

<%- include('../partials/admin/footer') %>